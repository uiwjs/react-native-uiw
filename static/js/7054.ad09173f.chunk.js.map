{"version":3,"file":"static/js/7054.ad09173f.chunk.js","mappings":"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","sources":["component/Preview/index.js","react-native/lib/TreeSelect/README.md","pages/components/treeSelect/index.tsx","react-native/lib/TreeSelect/styles.js","react-native/lib/TreeSelect/tree-select.js","react-native/lib/TreeSelect/index.js","react-native/lib/utils/tree-select.js","react-native/lib/utils/hooks.js","../node_modules/ahooks/es/usePersistFn/index.js","../node_modules/ahooks/es/useUpdate/index.js","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  max-width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    if (newValue === 'true') {\n      return true;\n    }\n    if (newValue === 'false') {\n      return false;\n    }\n  }\n  return defaultValue;\n};\n\nconst Preview = (mdData) => {\n  const $dom = useRef(null);\n\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        {...mdData}\n        disableCopy={true}\n        // transformImageUri={transformImageUri}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  disableToolbar={getBooleanValue(param, 'disableToolbar', false)}\n                  disableCode={getBooleanValue(param, 'disableCode', false)}\n                  disablePreview={getBooleanValue(param, 'disablePreview', false)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                  copied={getBooleanValue(param, 'copied', true)}\n                  background={param.background}\n                  toolbar={param.title || '示例'}\n                  code={<code {...rest} />}\n                  text={code}\n                >\n                  <Child />\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: { 12: (function() { \"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _TreeSelect = _interopRequireDefault(require(\"@uiw/react-native/lib/TreeSelect\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction Demo() {\n  var option = [{\n    label: '北京',\n    value: '01',\n    children: [{\n      label: '东城区',\n      value: '01-1'\n    }, {\n      label: '西城区',\n      value: '01-2'\n    }, {\n      label: '崇文区',\n      value: '01-3'\n    }, {\n      label: '宣武区',\n      value: '01-4'\n    }]\n  }, {\n    label: '浙江',\n    value: '02',\n    children: [{\n      label: '杭州',\n      value: '02-1',\n      children: [{\n        label: '西湖区',\n        value: '02-1-1'\n      }, {\n        label: '上城区',\n        value: '02-1-2'\n      }, {\n        label: '江干区',\n        value: '02-1-3'\n      }, {\n        label: '下城区',\n        value: '02-1-4'\n      }]\n    }, {\n      label: '宁波',\n      value: '02-2',\n      children: [{\n        label: 'xx区',\n        value: '02-2-1'\n      }, {\n        label: 'yy区',\n        value: '02-2-2'\n      }]\n    }, {\n      label: '温州',\n      value: '02-3'\n    }, {\n      label: '嘉兴',\n      value: '02-4'\n    }, {\n      label: '湖州',\n      value: '02-5'\n    }, {\n      label: '绍兴',\n      value: '02-6'\n    }]\n  }];\n  return /*#__PURE__*/_react[\"default\"].createElement(_TreeSelect[\"default\"], {\n    defaultValue: ['01', '01-1'],\n    options: option,\n    onChange: function onChange(value, nodes) {\n      console.log(value, nodes);\n    }\n  });\n}\nreturn Demo; })(),115: (function() { \"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _TreeSelect = _interopRequireDefault(require(\"@uiw/react-native/lib/TreeSelect\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction Demo() {\n  var option = [{\n    labels: '北京',\n    values: '01',\n    children: [{\n      labels: '东城区',\n      values: '01-1'\n    }, {\n      labels: '西城区',\n      values: '01-2'\n    }, {\n      labels: '崇文区',\n      values: '01-3'\n    }, {\n      labels: '宣武区',\n      values: '01-4'\n    }]\n  }, {\n    labels: '浙江',\n    values: '02',\n    children: [{\n      labels: '杭州',\n      values: '02-1',\n      children: [{\n        labels: '西湖区',\n        values: '02-1-1'\n      }, {\n        labels: '上城区',\n        values: '02-1-2'\n      }, {\n        labels: '江干区',\n        values: '02-1-3'\n      }, {\n        labels: '下城区',\n        values: '02-1-4'\n      }]\n    }, {\n      labels: '宁波',\n      values: '02-2',\n      children: [{\n        labels: 'xx区',\n        values: '02-2-1'\n      }, {\n        labels: 'yy区',\n        values: '02-2-2'\n      }]\n    }, {\n      labels: '温州',\n      values: '02-3'\n    }, {\n      labels: '嘉兴',\n      values: '02-4'\n    }, {\n      labels: '湖州',\n      values: '02-5'\n    }, {\n      labels: '绍兴',\n      values: '02-6'\n    }]\n  }];\n  return /*#__PURE__*/_react[\"default\"].createElement(_TreeSelect[\"default\"], {\n    defaultValue: ['01', '01-1'],\n    options: option,\n    fieldNames: {\n      label: \"labels\",\n      value: 'values',\n      children: 'children'\n    },\n    onChange: function onChange(value, nodes) {\n      console.log(value, nodes);\n    }\n  });\n}\nreturn Demo; })(), },\n    data: {\n  \"12\": {\n    \"name\": 12,\n    \"meta\": {},\n    \"code\": \"\\\"use strict\\\";\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\nvar _TreeSelect = _interopRequireDefault(require(\\\"@uiw/react-native/lib/TreeSelect\\\"));\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\nfunction Demo() {\\n  var option = [{\\n    label: '北京',\\n    value: '01',\\n    children: [{\\n      label: '东城区',\\n      value: '01-1'\\n    }, {\\n      label: '西城区',\\n      value: '01-2'\\n    }, {\\n      label: '崇文区',\\n      value: '01-3'\\n    }, {\\n      label: '宣武区',\\n      value: '01-4'\\n    }]\\n  }, {\\n    label: '浙江',\\n    value: '02',\\n    children: [{\\n      label: '杭州',\\n      value: '02-1',\\n      children: [{\\n        label: '西湖区',\\n        value: '02-1-1'\\n      }, {\\n        label: '上城区',\\n        value: '02-1-2'\\n      }, {\\n        label: '江干区',\\n        value: '02-1-3'\\n      }, {\\n        label: '下城区',\\n        value: '02-1-4'\\n      }]\\n    }, {\\n      label: '宁波',\\n      value: '02-2',\\n      children: [{\\n        label: 'xx区',\\n        value: '02-2-1'\\n      }, {\\n        label: 'yy区',\\n        value: '02-2-2'\\n      }]\\n    }, {\\n      label: '温州',\\n      value: '02-3'\\n    }, {\\n      label: '嘉兴',\\n      value: '02-4'\\n    }, {\\n      label: '湖州',\\n      value: '02-5'\\n    }, {\\n      label: '绍兴',\\n      value: '02-6'\\n    }]\\n  }];\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_TreeSelect[\\\"default\\\"], {\\n    defaultValue: ['01', '01-1'],\\n    options: option,\\n    onChange: function onChange(value, nodes) {\\n      console.log(value, nodes);\\n    }\\n  });\\n}\\nreturn Demo;\",\n    \"language\": \"jsx\",\n    \"value\": \"import React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        label: '北京',\\n        value: '01',\\n        children: [\\n          {\\n            label: '东城区',\\n            value: '01-1',\\n          },\\n          {\\n            label: '西城区',\\n            value: '01-2',\\n          },\\n          {\\n            label: '崇文区',\\n            value: '01-3',\\n          },\\n          {\\n            label: '宣武区',\\n            value: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        label: '浙江',\\n        value: '02',\\n        children: [\\n          {\\n            label: '杭州',\\n            value: '02-1',\\n            children: [\\n              {\\n                label: '西湖区',\\n                value: '02-1-1',\\n              },\\n              {\\n                label: '上城区',\\n                value: '02-1-2',\\n              },\\n              {\\n                label: '江干区',\\n                value: '02-1-3',\\n              },\\n              {\\n                label: '下城区',\\n                value: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            label: '宁波',\\n            value: '02-2',\\n            children: [\\n              {\\n                label: 'xx区',\\n                value: '02-2-1',\\n              },\\n              {\\n                label: 'yy区',\\n                value: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            label: '温州',\\n            value: '02-3',\\n          },\\n          {\\n            label: '嘉兴',\\n            value: '02-4',\\n          },\\n          {\\n            label: '湖州',\\n            value: '02-5',\\n          },\\n          {\\n            label: '绍兴',\\n            value: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\"\n  },\n  \"115\": {\n    \"name\": 115,\n    \"meta\": {},\n    \"code\": \"\\\"use strict\\\";\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\nvar _TreeSelect = _interopRequireDefault(require(\\\"@uiw/react-native/lib/TreeSelect\\\"));\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\nfunction Demo() {\\n  var option = [{\\n    labels: '北京',\\n    values: '01',\\n    children: [{\\n      labels: '东城区',\\n      values: '01-1'\\n    }, {\\n      labels: '西城区',\\n      values: '01-2'\\n    }, {\\n      labels: '崇文区',\\n      values: '01-3'\\n    }, {\\n      labels: '宣武区',\\n      values: '01-4'\\n    }]\\n  }, {\\n    labels: '浙江',\\n    values: '02',\\n    children: [{\\n      labels: '杭州',\\n      values: '02-1',\\n      children: [{\\n        labels: '西湖区',\\n        values: '02-1-1'\\n      }, {\\n        labels: '上城区',\\n        values: '02-1-2'\\n      }, {\\n        labels: '江干区',\\n        values: '02-1-3'\\n      }, {\\n        labels: '下城区',\\n        values: '02-1-4'\\n      }]\\n    }, {\\n      labels: '宁波',\\n      values: '02-2',\\n      children: [{\\n        labels: 'xx区',\\n        values: '02-2-1'\\n      }, {\\n        labels: 'yy区',\\n        values: '02-2-2'\\n      }]\\n    }, {\\n      labels: '温州',\\n      values: '02-3'\\n    }, {\\n      labels: '嘉兴',\\n      values: '02-4'\\n    }, {\\n      labels: '湖州',\\n      values: '02-5'\\n    }, {\\n      labels: '绍兴',\\n      values: '02-6'\\n    }]\\n  }];\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_TreeSelect[\\\"default\\\"], {\\n    defaultValue: ['01', '01-1'],\\n    options: option,\\n    fieldNames: {\\n      label: \\\"labels\\\",\\n      value: 'values',\\n      children: 'children'\\n    },\\n    onChange: function onChange(value, nodes) {\\n      console.log(value, nodes);\\n    }\\n  });\\n}\\nreturn Demo;\",\n    \"language\": \"jsx\",\n    \"value\": \"import React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        labels: '北京',\\n        values: '01',\\n        children: [\\n          {\\n            labels: '东城区',\\n            values: '01-1',\\n          },\\n          {\\n            labels: '西城区',\\n            values: '01-2',\\n          },\\n          {\\n            labels: '崇文区',\\n            values: '01-3',\\n          },\\n          {\\n            labels: '宣武区',\\n            values: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        labels: '浙江',\\n        values: '02',\\n        children: [\\n          {\\n            labels: '杭州',\\n            values: '02-1',\\n            children: [\\n              {\\n                labels: '西湖区',\\n                values: '02-1-1',\\n              },\\n              {\\n                labels: '上城区',\\n                values: '02-1-2',\\n              },\\n              {\\n                labels: '江干区',\\n                values: '02-1-3',\\n              },\\n              {\\n                labels: '下城区',\\n                values: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '宁波',\\n            values: '02-2',\\n            children: [\\n              {\\n                labels: 'xx区',\\n                values: '02-2-1',\\n              },\\n              {\\n                labels: 'yy区',\\n                values: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '温州',\\n            values: '02-3',\\n          },\\n          {\\n            labels: '嘉兴',\\n            values: '02-4',\\n          },\\n          {\\n            labels: '湖州',\\n            values: '02-5',\\n          },\\n          {\\n            labels: '绍兴',\\n            values: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       fieldNames={{ label: \\\"labels\\\", value: 'values', children: 'children'}}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\"\n  }\n},\n    source: \"TreeSelect 级联选择器\\n---\\n\\n> 🚧 注意：测试版本谨慎使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!-- ![](https://user-images.githubusercontent.com/66067296/147335182-2abf199f-e206-4b4b-9edf-f1c29568d884.gif) -->\\n<!--rehype:style=zoom: 33%;float: right; margin-left: 15px;-->\\n\\n### 基础示例\\n\\n```jsx  mdx:preview\\nimport React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        label: '北京',\\n        value: '01',\\n        children: [\\n          {\\n            label: '东城区',\\n            value: '01-1',\\n          },\\n          {\\n            label: '西城区',\\n            value: '01-2',\\n          },\\n          {\\n            label: '崇文区',\\n            value: '01-3',\\n          },\\n          {\\n            label: '宣武区',\\n            value: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        label: '浙江',\\n        value: '02',\\n        children: [\\n          {\\n            label: '杭州',\\n            value: '02-1',\\n            children: [\\n              {\\n                label: '西湖区',\\n                value: '02-1-1',\\n              },\\n              {\\n                label: '上城区',\\n                value: '02-1-2',\\n              },\\n              {\\n                label: '江干区',\\n                value: '02-1-3',\\n              },\\n              {\\n                label: '下城区',\\n                value: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            label: '宁波',\\n            value: '02-2',\\n            children: [\\n              {\\n                label: 'xx区',\\n                value: '02-2-1',\\n              },\\n              {\\n                label: 'yy区',\\n                value: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            label: '温州',\\n            value: '02-3',\\n          },\\n          {\\n            label: '嘉兴',\\n            value: '02-4',\\n          },\\n          {\\n            label: '湖州',\\n            value: '02-5',\\n          },\\n          {\\n            label: '绍兴',\\n            value: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\\n```\\n\\n\\n### 自定义字段名称\\n\\n```jsx  mdx:preview\\nimport React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        labels: '北京',\\n        values: '01',\\n        children: [\\n          {\\n            labels: '东城区',\\n            values: '01-1',\\n          },\\n          {\\n            labels: '西城区',\\n            values: '01-2',\\n          },\\n          {\\n            labels: '崇文区',\\n            values: '01-3',\\n          },\\n          {\\n            labels: '宣武区',\\n            values: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        labels: '浙江',\\n        values: '02',\\n        children: [\\n          {\\n            labels: '杭州',\\n            values: '02-1',\\n            children: [\\n              {\\n                labels: '西湖区',\\n                values: '02-1-1',\\n              },\\n              {\\n                labels: '上城区',\\n                values: '02-1-2',\\n              },\\n              {\\n                labels: '江干区',\\n                values: '02-1-3',\\n              },\\n              {\\n                labels: '下城区',\\n                values: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '宁波',\\n            values: '02-2',\\n            children: [\\n              {\\n                labels: 'xx区',\\n                values: '02-2-1',\\n              },\\n              {\\n                labels: 'yy区',\\n                values: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '温州',\\n            values: '02-3',\\n          },\\n          {\\n            labels: '嘉兴',\\n            values: '02-4',\\n          },\\n          {\\n            labels: '湖州',\\n            values: '02-5',\\n          },\\n          {\\n            labels: '绍兴',\\n            values: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       fieldNames={{ label: \\\"labels\\\", value: 'values', children: 'children'}}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\\n```\\n\\n\\n### TransitionImage Props\\n\\n```ts\\nexport interface TreeSelectOption {\\n  [key: string]: any\\n}\\n\\nexport type TreeSelectProps = {\\n  // 级联数据\\n  options: TreeSelectOption[]\\n  // 默认选中项\\n  defaultValue?: string[]\\n  // 选中项\\n  value?: string[]\\n  // value 变化时触发\\n  onChange?: (value: string[], extend: { options: TreeSelectOption[] }) => void\\n  // 自定义 options 中 label value children 的字段\\n  fieldNames?: {{ label: string, value: string, children: string } } | any\\n  // 选中文本颜色\\n  activeColor?:ColorValue\\n}\\n```\\n\"\n  }","import Preview from 'src/component/Preview';\nimport md from '@uiw/react-native/lib/TreeSelect/README.md';\n\nconst DEMO = () => <Preview {...md} />;\nexport default DEMO;\n","import { StyleSheet } from 'react-native';\nexport const style = StyleSheet.create({\n  item: {\n    minHeight: 50,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  active_first_item: {\n    backgroundColor: '#fff'\n  },\n  not_active_first_item: {\n    backgroundColor: '#f6f7f9'\n  },\n  active_nth_item: {\n    backgroundColor: '#fef4f3',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  not_active_nth_item: {\n    backgroundColor: '#f6f7f9',\n    borderColor: '#fff',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginLeft: 10,\n    marginBottom: 10\n  }\n});","import React, { useMemo } from 'react';\nimport { usePropsValue } from '../utils/hooks';\nimport { getTreeDeep } from '../utils/tree-select';\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native';\nimport { style } from './styles';\nconst defaultProps = {\n  options: [],\n  fieldNames: {},\n  defaultValue: [],\n  activeColor: '#5847FF'\n};\nexport const TreeSelect = p => {\n  const props = {\n    ...defaultProps,\n    ...p\n  };\n  const labelName = props.fieldNames.label || 'label';\n  const valueName = props.fieldNames.value || 'value';\n  const childrenName = props.fieldNames.children || 'children';\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  });\n  const [deep, optionsMap, optionsParentMap] = useMemo(() => {\n    const deep = getTreeDeep(props.options, childrenName);\n    const optionsMap = new Map();\n    const optionsParentMap = new Map();\n    function traverse(current, children) {\n      children.forEach(item => {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]);\n  const onItemSelect = node => {\n    // 找到父级节点\n    const parentNodes = [];\n    let current = node;\n    while (current) {\n      parentNodes.unshift(current);\n      const next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n    const values = parentNodes.map(i => i[valueName]);\n    setValue(values);\n    props.onChange?.(values, {\n      options: parentNodes\n    });\n  };\n\n  // item样式\n  const activeStyles = (index, isActive, isLast) => {\n    let styles;\n    // 选中第一排\n    if (isActive && index === 0) {\n      styles = {\n        ...style.active_first_item\n      };\n    }\n    // 未选中第一排\n    if (!isActive && index === 0) {\n      styles = {\n        ...style.not_active_first_item\n      };\n    }\n    // 选中后排\n    if (isActive && index !== 0) {\n      styles = {\n        ...style.active_nth_item,\n        borderColor: props.activeColor,\n        marginRight: isLast ? 10 : 0\n      };\n    }\n    // 未选中后排\n    if (!isActive && index !== 0) {\n      styles = {\n        ...style.not_active_nth_item,\n        marginRight: isLast ? 10 : 0\n      };\n    }\n    return styles;\n  };\n  const renderItems = (columnOptions = [], index) => {\n    return columnOptions.map(item => {\n      const isActive = item[valueName] === value[index];\n      const active_font_color = index === 0 ? '#333' : props.activeColor;\n      // 是否是最后一列\n      const isLast = deep - 1 === index;\n      return <TouchableOpacity key={item[valueName]} onPress={() => {\n        if (!isActive) {\n          onItemSelect(item);\n        }\n      }} style={[style.item, {\n        ...activeStyles(index, isActive, isLast)\n      }]}>\n          <Text style={isActive ? {\n          color: active_font_color,\n          fontWeight: 'bold'\n        } : {\n          color: '#666'\n        }}>\n            {item[labelName]}\n          </Text>\n        </TouchableOpacity>;\n    });\n  };\n  const renderColumns = () => {\n    const columns = [];\n    for (let i = 0; i < deep; i++) {\n      let width = `${100 / deep}%`;\n\n      // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n      if (deep === 2 && i === 0) {\n        width = `33.33%`;\n      }\n      if (deep === 2 && i === 1) {\n        width = `66.67%`;\n      }\n      const column = <ScrollView key={i} style={{\n        width,\n        flex: 1,\n        backgroundColor: i === 0 ? '#f6f7f9' : '#fff'\n      }}>\n          {renderItems(i === 0 ? props.options : optionsMap.get(value[i - 1])?.[childrenName], i)}\n        </ScrollView>;\n      columns.push(column);\n    }\n    return columns;\n  };\n  return <View style={{\n    flex: 1,\n    flexDirection: 'row'\n  }}>{renderColumns()}</View>;\n};","import { TreeSelect } from './tree-select';\nexport default TreeSelect;","// 找到树的深度\nexport function getTreeDeep(treeData, childrenName = 'children') {\n  const walker = tree => {\n    let deep = 0;\n    tree.forEach(item => {\n      if (item[childrenName]) {\n        deep = Math.max(deep, walker(item[childrenName]) + 1);\n      } else {\n        deep = Math.max(deep, 1);\n      }\n    });\n    return deep;\n  };\n  return walker(treeData);\n}","import { useRef, useEffect } from 'react';\nimport { usePersistFn, useUpdate } from 'ahooks';\n\n/**\n * 获取上一轮的 props 或 state\n * How to get the previous props or state?\n * https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n * @example\n * ```js\n * function Counter() {\n *   const [count, setCount] = useState(0);\n *   const prevCount = usePrevious(count);\n *   return <h1>Now: {count}, before: {prevCount}</h1>;\n * }\n * ```\n */\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\nexport function usePropsValue(options) {\n  const {\n    value,\n    defaultValue,\n    onChange\n  } = options;\n  const update = useUpdate();\n  const stateRef = useRef(value !== undefined ? value : defaultValue);\n  if (value !== undefined) {\n    stateRef.current = value;\n  }\n  const setState = usePersistFn(v => {\n    if (value === undefined) {\n      stateRef.current = v;\n      update();\n    }\n    onChange?.(v);\n  });\n  return [stateRef.current, setState];\n}","import { useRef } from 'react';\n\nfunction usePersistFn(fn) {\n  var fnRef = useRef(fn);\n  fnRef.current = fn;\n  var persistFn = useRef();\n\n  if (!persistFn.current) {\n    persistFn.current = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return fnRef.current.apply(this, args);\n    };\n  }\n\n  return persistFn.current;\n}\n\nexport default usePersistFn;","var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from 'react';\n\nvar useUpdate = function useUpdate() {\n  var _a = __read(useState({}), 2),\n      setState = _a[1];\n\n  return useCallback(function () {\n    return setState({});\n  }, []);\n};\n\nexport default useUpdate;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","Markdown","MarkdownPreview","getBooleanValue","param","field","defaultValue","Reflect","has","newValue","get","mdData","$dom","useRef","ref","disableCopy","source","rehypeRewrite","node","index","parent","type","test","tagName","child","children","properties","ariaHidden","components","code","inline","props","meta","rest","isMeta","line","position","start","metaId","getMetaId","String","Child","data","value","getURLParameters","disableCheckered","disableToolbar","disableCode","disablePreview","bordered","copied","background","toolbar","title","text","speed","percent","scrollToTop","width","onClick","format","_react","_interopRequireDefault","_TreeSelect","obj","__esModule","createElement","options","label","onChange","nodes","console","log","labels","values","fieldNames","Preview","md","style","StyleSheet","item","minHeight","display","alignItems","justifyContent","active_first_item","backgroundColor","not_active_first_item","active_nth_item","borderWidth","borderRadius","marginLeft","marginBottom","not_active_nth_item","borderColor","defaultProps","activeColor","p","labelName","valueName","childrenName","usePropsValue","setValue","useMemo","deep","treeData","walker","tree","forEach","Math","max","getTreeDeep","optionsMap","Map","optionsParentMap","traverse","current","set","undefined","onItemSelect","parentNodes","unshift","map","i","activeStyles","isActive","isLast","styles","marginRight","renderItems","columnOptions","active_font_color","TouchableOpacity","onPress","Text","color","fontWeight","View","flex","flexDirection","columns","column","ScrollView","push","renderColumns","usePrevious","useEffect","update","useUpdate","stateRef","setState","usePersistFn","v","fn","fnRef","persistFn","args","_i","arguments","length","apply","this","__read","o","n","m","Symbol","iterator","r","e","call","ar","next","done","error","useState","useCallback","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}