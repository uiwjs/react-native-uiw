{"version":3,"file":"static/js/3469.efae647c.chunk.js","mappings":"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","sources":["component/Preview/index.js","pages/docs/phone-run/android-phone/README.md","pages/docs/phone-run/android-phone/index.tsx","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync","pages/docs/phone-run/android-phone|sync|//.(png%7Cgif%7Cjpg%7Csvg)$"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\nimport Footer from '../Footer';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  /* max-width: 1024px; */\n  width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    return newValue === 'true';\n  }\n  return defaultValue;\n};\n\nconst Preview = ({ path, ...mdData }) => {\n  const Preview = CodeLayout.Preview;\n  const Code = CodeLayout.Code;\n  const Toolbar = CodeLayout.Toolbar;\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        {...mdData}\n        disableCopy={true}\n        // transformImageUri={transformImageUri}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                >\n                  <Preview>\n                    <Child />\n                  </Preview>\n                  <Toolbar text={code} copied={getBooleanValue(param, 'copied', true)}>\n                    {param.title || '示例'}\n                  </Toolbar>\n                  <Code>\n                    <code {...rest} />\n                  </Code>\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <Footer path={path} />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: {  },\n    data: {},\n    source: \"Android 真机运行\\n===\\n\\n本文档将指导你通过必须的步骤在设备上运行 React Native app，为生产做准备 。\\n\\n## 在 Android 设备上运行应用\\n\\n> 🚧 下文所指的设备包括 Android 手机和模拟器。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### `1. 开启 USB 调试`\\n\\n在默认情况下 Android 设备只能从应用市场来安装应用。你需要开启 USB 调试才能自由安装开发版本的 APP。\\n\\n首先，确定你已经打开设备的 USB 调试开关。\\n\\n### `2. 通过 USB 数据线连接设备`\\n\\n现在我们设置一个 Android 设备来运行我们的 React Native 项目，通过 USB 将你的设备插入开发机器以继续。\\n\\n下面检查你的设备是否能正确连接到 ADB（Android Debug Bridge），使用`adb devices`命令:\\n\\n```\\n$ adb devices\\nList of devices attached\\nemulator-5554 offline   # Google emulator\\n14ed2fcc device         # Physical device\\n```\\n\\n在右边那列看到`device`说明你的设备已经被正确连接了。注意，你每次只应当`连接一个设备`<!--rehype:style=color: red;background: #ffd2d2;-->。\\n\\n> 🚧 译注：如果你连接了多个设备（包含模拟器在内），后续的一些操作可能会失败。拔掉不需要的设备，或者关掉模拟器，确保 adb devices 的输出只有一个是连接状态。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### `3. 运行应用`\\n\\n现在你可以运行下面的命令来在设备上安装并启动应用了。\\n\\n```\\n$ npx react-native run-android\\n```\\n\\n> 🚧 如果你收到\\\"`bridge configuration isn't available`\\\"错误，请参阅使用adb reverse。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n> 🚧 提示：你还可以运行`npx react-native run-android --variant=release`来安装 release 版的应用。当然你需要[先配置好签名](https://reactnative.cn/docs/signed-apk-android)，且此时无法再开启开发者菜单。注意在 debug 和 release 版本间来回切换安装时可能会报错签名不匹配，此时需要先卸载前一个版本再尝试安装。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n## 从设备上访问开发服务器\\n\\n在启用开发服务器（官方名称 metro，但我们更常称之为 Packager）的情况下，你可以快速的迭代修改应用，然后在设备上立即查看结果。按照下面描述的任意一种方法来使你的设备可以访问到运行在电脑上的开发服务器。\\n\\n> 🚧 译注：默认情况下模拟器可以自动探测宿主机 ip 并连接，只有 Android 5.0 以下版本的手机需要按下文说明来手动操作。但某些情形下可能也无法正常连接，请注意去[讨论区](https://github.com/reactnativecn/react-native-website/issues)查看是否有人遭遇同类型的问题（不同时期不同版本可能是不同的问题）。有些文章会提到`react-native bundle`命令，这个命令会把 js 文件打包内置到应用中，从而不需要连接 metro，但这并`没有解决问题`。我们在开发中必须使用到 metro，否则无法刷新代码。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### `(Android 5.0 及以上)使用 adb reverse 命令`\\n\\n> 🚧 注意，这个选项只能在 5.0 以上版本(API 21+)的安卓设备上使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n首先把你的设备通过 USB 数据线连接到电脑上，并开启 USB 调试（关于如何开启 USB 调试，参见上面的章节）。\\n\\n1. 运行`adb reverse tcp:8081 tcp:8081`\\n2. 不需要更多配置，你就可以使用`Reload JS`和其它的开发选项了\\n\\n### `(Android 5.0 以下)通过 Wi-Fi 连接你的本地开发服务器`\\n\\n你还可以通过 Wi-Fi 连接到开发服务器。你首先需要使用 USB 在你的设备上安装该应用程序，完成之后便可以按照这些说明进行无线调试。在继续之前，你需要知道开发机器的当前 IP 地址。\\n\\n你可以在`System Preferences` → `Network`中找到 IP 地址。\\n\\n1. 首先确保你的电脑和手机设备在`同一个 Wi-Fi 环境`<!--rehype:style=color: red;background: #ffd2d2;-->下。\\n2. 在设备上运行你的 React Native 应用。和打开其它 App 一样操作。\\n3. 你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。\\n4. 摇晃设备，或者运行`adb shell input keyevent 82`，可以打开`开发者菜单`<!--rehype:style=color: red;background: #ffd2d2;-->。\\n5. 点击`Dev Settings` -> `Debug server host for device`。\\n6. 输入你电脑的 `IP 地址和端口号`（譬如 10.0.1.1:8081）。`在 Mac 上`<!--rehype:style=color: red;background: #ffd2d2;-->，你可以在系统设置/网络里找查询你的 IP 地址。`在 Windows 上`<!--rehype:style=color: red;background: #ffd2d2;-->，打开命令提示符并输入`ipconfig`来查询你的 IP 地址。`在 Linux 上`<!--rehype:style=color: red;background: #ffd2d2;-->你可以在终端中输入`ifconfig`来查询你的 IP 地址。\\n7. 回到`开发者菜单`<!--rehype:style=color: red;background: #ffd2d2;-->然后选择`Reload JS`。\\n\\n你现在可以从开发者菜单启用实时重新加载。只要你的 JavaScript 代码发生更改，应用就会重新加载。\\n## 开发模式弹出开发者菜单刷新应用\\n\\n命令行支持*打开开发者菜单*，和其它的一些操作\\n\\n- r - 重新加载应用\\n- d - 打开开发者菜单\\n- i - 在 iOS 上运行\\n- a - 在 Android 上运行\\n\\n\\n#### Android\\n\\n按两次 <kbd>R</kbd> 键或从开发者菜单(<kbd>⌘</kbd><kbd>M</kbd>)中选择重新加载(Reload)以预览您的更改。\\n\\n> 如果没有起作用可以在命令行使用 `adb shell input keyevent 82` 命令唤起**开发者菜单**\\n\\n## 恭喜\\n恭喜！ 你已经使用 React Native 构建了一个很棒的应用程序。\"\n  }","import Preview from 'src/component/Preview';\nimport md from './README.md';\n\nconst transformImageUri = (url: string) => {\n  const reqImage = (require as any).context!('./', true, /\\.(png|gif|jpg|svg)$/);\n  const urlAddr = reqImage(url);\n  return urlAddr;\n};\n\nconst DEMO = () => (\n  <Preview\n    {...md}\n    transformImageUri={transformImageUri}\n    path=\"website/src/pages/docs/phone-run/android-phone/README.md\"\n  />\n);\nexport default DEMO;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 18236;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Markdown","MarkdownPreview","_templateObject2","getBooleanValue","param","field","defaultValue","Reflect","has","get","_ref","path","mdData","_objectWithoutProperties","_excluded","Preview","CodeLayout","Code","Toolbar","$dom","useRef","_jsxs","ref","children","_jsx","_objectSpread","disableCopy","source","rehypeRewrite","node","index","parent","type","test","tagName","child","properties","ariaHidden","components","code","_ref2","_node$position","inline","props","_excluded2","meta","rest","_excluded3","isMeta","line","position","start","metaId","getMetaId","String","Child","concat","data","value","getURLParameters","disableCheckered","bordered","text","copied","title","Footer","BackTop","speed","_ref3","percent","scrollToTop","Circle","width","onClick","format","Icon","transformImageUri","url","require","reqImage","md","webpackEmptyContext","req","e","Error","keys","resolve","id","module","exports"],"sourceRoot":""}