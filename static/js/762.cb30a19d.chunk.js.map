{"version":3,"file":"static/js/762.cb30a19d.chunk.js","mappings":"+GACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,4+S","sources":["react-native/lib/Form/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"Form 表单\\n---\\n\\n集成react-native-uiw表单控件,并支持自定义组件\\n\\n> 🚧 注意：测试版本谨慎使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### 基础示例\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = { name: '王滴滴' };\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n}\\n```\\n<!--End-->\\n\\n### form.validateFields进行表单验证提交\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,Toast } from 'react-native';\\nimport { Form,Button } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      attr: {},\\n      required: true,\\n      validate: (val) => (!val ? `请输入name` : ''),\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n        <Button\\n          type=\\\"primary\\\"\\n          onPress={() => {\\n            form\\n              .validateFields()\\n              .then((values) => Toast.success(JSON.stringify(values)))\\n              .catch((errors) => Toast.warning(JSON.stringify(errors)));\\n          }}>\\n          确定\\n        </Button>\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### customComponentList自定义表单组件\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,Slider } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const customComponentList = {\\n      render: <Slider />,\\n  }\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      required: true,\\n    },\\n    {\\n      type: 'render',\\n      field: 'render',\\n      name: '自定义',\\n    },\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items}  customComponentList={customComponentList} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### watch监听表单变化\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const watch = {\\n    name: (value) => console.log('value', value)\\n  }\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      required: true,\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} watch={watch} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### 动态添加表单list(当type为cardList时)\\n\\n> ⚠️ 警告:\\n  1.目前仅能嵌套一层cardList\\n  2.我们暂时无法验证到添加的表单项里的每一个字段<!--rehype:style=background: #F08800; color: #fff;-->。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,View,Text } from 'react-native';\\nimport { Form,Button,Flex } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'cardList',\\n      field: 'cardList',\\n      name: '联系人集合',\\n      renderHeader: (i, { remove ,moveUp,moveDown,moveToTop,moveToBottom }) => (\\n        <View style={{marginTop: 12, display: 'flex', justifyContent: 'space-between', flexDirection: 'row'}}>\\n          <View>\\n            <Text>{`联系人${i + 1}`}</Text>\\n          </View>\\n          <Flex>\\n            <Text style={{marginRight:5}}  onPress={() => moveUp()}>上移</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveDown()}>下移</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveToTop()}>置顶</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveToBottom()}>置底</Text>\\n            <Text onPress={() => remove()}>删除</Text>\\n          </Flex>\\n        </View>\\n      ),\\n      renderAdd: ({ add }) => (\\n        <View style={{marginTop: 12}}>\\n          <Button onPress={() => add()} type=\\\"primary\\\" size=\\\"default\\\" bordered={false}>\\n            新增数据\\n          </Button>\\n        </View>\\n      ),\\n      items: [\\n        {\\n          type: 'input',\\n          field: 'name',\\n          name: '联系人姓名',\\n        },\\n        {\\n          type: 'input',\\n          field: 'phone',\\n          name: '联系人电话',\\n        },\\n      ],\\n    },\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### class组件获取form\\n\\n<!--DemoStart--> \\n```jsx\\nimport React from 'react'\\nimport { SafeAreaView } from 'react-native';\\nimport { Form, Button } from '@uiw/react-native';\\n\\nclass FormDemo extends React.Component {\\n  render(){\\n    const { form } = this.props\\n    const schema = [\\n      {\\n        type: 'input',\\n        field: 'name',\\n        name: '输入框',\\n        attr: {},\\n        required: true,\\n        validate: (val) => (!val ? `请输入name` : ''),\\n      }\\n    ];\\n    return (\\n      <SafeAreaView>\\n        <Form\\n          form={form}\\n          schema={schema}\\n          initialValues={{ name: '王滴滴' }}\\n        />\\n        <Button\\n          type=\\\"primary\\\"\\n          onPress={() => form.validateFields().then((values) => {}).catch((errors) => {}) }>\\n            确定\\n        </Button>\\n      </SafeAreaView>\\n    );\\n  }\\n}\\n\\nconst FormComponent = Form.create(FormDemo)\\n\\nexport default FormComponent;\\n```\\n<!--End-->\\n\\n\\n\\n### FormProps\\n```ts\\ninterface FormProps<FormData = any, FieldValue = FormData[keyof FormData], FieldKey extends KeyType = keyof FormData> {\\n  /**\\n   * 表单集合\\n  */\\n  schema?: FormItemsProps[];\\n  /**\\n   * 经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建\\n  */\\n  form: FormInstance<FormData, FieldValue, FieldKey>;\\n  /**\\n   * 表单默认值，只有初始化以及重置时生效\\n  */\\n  initialValues?: Partial<FormData>;\\n  /**\\n   * 支持默认和卡片两种模式\\n  */\\n  mode?:'default' | 'card';\\n  // 表单是否在onChange时进行验证\\n  changeValidate?: boolean;\\n  // 监听表单字段变化\\n  watch?: Partial<Record<string, (value: unknown) => void>>;\\n  // 自定义组件\\n  customComponentList?: Partial<Record<string, JSX.Element>>;\\n}\\n```\\n\\n### FormItemsProps\\n```ts\\ninterface FormItemsProps {\\n  // 字段名\\n  field: string;\\n  // 字段类型(默认继承了react-native-uiw中的 input | textArea | slider | rate | radio | search | switch | checkBox | stepper ｜ cardList   )\\n  type: string;\\n  // 标签名\\n  name: string;\\n  // 验证规则\\n  validate?: RulesOption['validate'];\\n  options?: Array<{ label: string; value: KeyType }>;\\n  // 表单控件props\\n  attr?: any;\\n  // 展示是否必填\\n  required?: boolean;\\n  // 是否隐藏\\n  hide?:boolean\\n  // 当type为cardList生效,渲染每一项的头部内容\\n  renderHeader?:(index:number,{ remove }:{ remove:()=>void })=>React.ReactNode;\\n  // 当type为cardList生效,渲染添加按钮的文案\\n  renderAdd?:( { add }:{ add:()=>void } )=>React.ReactNode;\\n  // 当type为cardList生效,配置表单项\\n  items?: Omit<FormItemsProps, 'validate' | 'required'>[];\\n}\\n```\\n\\n### FormInstance\\n```ts\\ntype FormInstance<FormData = any, FieldValue = FormData[keyof FormData], FieldKey extends KeyType = keyof FormData> = {\\n  /**\\n   * 获取对应字段名的值\\n  */\\n  getFieldValue: (field: FieldKey) => FieldValue;\\n   /**\\n   * 设置对应字段名的值\\n  */\\n  setFieldValue: (field: FieldKey, value: FieldValue) => void;\\n   /**\\n   * 重制表单\\n  */\\n  resetFieldValue: () => void;\\n  /**\\n   * 触发验证\\n  */\\n  validate: () => Partial<Record<string, string>>;\\n  /**\\n   * 触发表单验证获取表单数据\\n  */\\n  validateFields: () => Promise<FormData> | any;\\n  getInnerMethods: (inner?: boolean) => InnerMethodsReturnType<FormData>;\\n};\\n```\\n\\n\\n\\n\"\n  }"],"names":["components","data","source"],"sourceRoot":""}