{"version":3,"file":"static/js/7054.6010727d.chunk.js","mappings":"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","sources":["component/Preview/index.js","react-native/lib/TreeSelect/README.md","pages/components/treeSelect/index.tsx","react-native/lib/TreeSelect/styles.js","react-native/lib/TreeSelect/tree-select.js","react-native/lib/TreeSelect/index.js","react-native/lib/utils/tree-select.js","react-native/lib/utils/hooks.js","../node_modules/ahooks/es/usePersistFn/index.js","../node_modules/ahooks/es/useUpdate/index.js","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\nimport Footer from '../Footer';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  /* max-width: 1024px; */\n  width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    return newValue === 'true';\n  }\n  return defaultValue;\n};\n\nconst Preview = ({ path, ...mdData }) => {\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        {...mdData}\n        disableCopy={true}\n        // transformImageUri={transformImageUri}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && node.tagName === 'pre' && node.children[0].data?.meta) {\n            const meta = node.children[0].data?.meta;\n            if (isMeta(meta)) {\n              node.tagName = 'div';\n              if (!node.properties) {\n                node.properties = {};\n              }\n              node.properties['data-md'] = meta;\n              node.properties['data-meta'] = 'preview';\n            }\n          }\n        }}\n        components={{\n          div: ({ node, ...props }) => {\n            const { 'data-meta': meta, 'data-md': metaData } = props;\n            if (meta === 'preview') {\n              const line = node.position?.start.line;\n              const metaId = getMetaId(meta) || String(line);\n              const Child = mdData.components[`${metaId}`];\n              if (metaId && typeof Child === 'function') {\n                const code = mdData.data[metaId].value || '';\n                const param = getURLParameters(metaData);\n                return (\n                  <CodeLayout\n                    disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                    disableToolbar={getBooleanValue(param, 'disableToolbar', false)}\n                    disableCode={getBooleanValue(param, 'disableCode', false)}\n                    disablePreview={getBooleanValue(param, 'disablePreview', false)}\n                    bordered={getBooleanValue(param, 'bordered', true)}\n                    copied={getBooleanValue(param, 'copied', true)}\n                    background={param.background}\n                    toolbar={param.title || '示例'}\n                    codeProps={{ style: { padding: 0 } }}\n                    style={{ padding: 0 }}\n                    code={<pre {...props} />}\n                    text={code}\n                  >\n                    <Child />\n                  </CodeLayout>\n                );\n              }\n            }\n            return <div {...props} />;\n          },\n        }}\n      />\n      <Footer path={path} />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: { 12: (function() { \"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _TreeSelect = _interopRequireDefault(require(\"@uiw/react-native/lib/TreeSelect\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction Demo() {\n  var option = [{\n    label: '北京',\n    value: '01',\n    children: [{\n      label: '东城区',\n      value: '01-1'\n    }, {\n      label: '西城区',\n      value: '01-2'\n    }, {\n      label: '崇文区',\n      value: '01-3'\n    }, {\n      label: '宣武区',\n      value: '01-4'\n    }]\n  }, {\n    label: '浙江',\n    value: '02',\n    children: [{\n      label: '杭州',\n      value: '02-1',\n      children: [{\n        label: '西湖区',\n        value: '02-1-1'\n      }, {\n        label: '上城区',\n        value: '02-1-2'\n      }, {\n        label: '江干区',\n        value: '02-1-3'\n      }, {\n        label: '下城区',\n        value: '02-1-4'\n      }]\n    }, {\n      label: '宁波',\n      value: '02-2',\n      children: [{\n        label: 'xx区',\n        value: '02-2-1'\n      }, {\n        label: 'yy区',\n        value: '02-2-2'\n      }]\n    }, {\n      label: '温州',\n      value: '02-3'\n    }, {\n      label: '嘉兴',\n      value: '02-4'\n    }, {\n      label: '湖州',\n      value: '02-5'\n    }, {\n      label: '绍兴',\n      value: '02-6'\n    }]\n  }];\n  return /*#__PURE__*/_react[\"default\"].createElement(_TreeSelect[\"default\"], {\n    defaultValue: ['01', '01-1'],\n    options: option,\n    onChange: function onChange(value, nodes) {\n      console.log(value, nodes);\n    }\n  });\n}\nreturn Demo; })(),115: (function() { \"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _TreeSelect = _interopRequireDefault(require(\"@uiw/react-native/lib/TreeSelect\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction Demo() {\n  var option = [{\n    labels: '北京',\n    values: '01',\n    children: [{\n      labels: '东城区',\n      values: '01-1'\n    }, {\n      labels: '西城区',\n      values: '01-2'\n    }, {\n      labels: '崇文区',\n      values: '01-3'\n    }, {\n      labels: '宣武区',\n      values: '01-4'\n    }]\n  }, {\n    labels: '浙江',\n    values: '02',\n    children: [{\n      labels: '杭州',\n      values: '02-1',\n      children: [{\n        labels: '西湖区',\n        values: '02-1-1'\n      }, {\n        labels: '上城区',\n        values: '02-1-2'\n      }, {\n        labels: '江干区',\n        values: '02-1-3'\n      }, {\n        labels: '下城区',\n        values: '02-1-4'\n      }]\n    }, {\n      labels: '宁波',\n      values: '02-2',\n      children: [{\n        labels: 'xx区',\n        values: '02-2-1'\n      }, {\n        labels: 'yy区',\n        values: '02-2-2'\n      }]\n    }, {\n      labels: '温州',\n      values: '02-3'\n    }, {\n      labels: '嘉兴',\n      values: '02-4'\n    }, {\n      labels: '湖州',\n      values: '02-5'\n    }, {\n      labels: '绍兴',\n      values: '02-6'\n    }]\n  }];\n  return /*#__PURE__*/_react[\"default\"].createElement(_TreeSelect[\"default\"], {\n    defaultValue: ['01', '01-1'],\n    options: option,\n    fieldNames: {\n      label: \"labels\",\n      value: 'values',\n      children: 'children'\n    },\n    onChange: function onChange(value, nodes) {\n      console.log(value, nodes);\n    }\n  });\n}\nreturn Demo; })(), },\n    data: {\n  \"12\": {\n    \"name\": 12,\n    \"meta\": {\n      \"background\": \"#bebebe29\"\n    },\n    \"code\": \"\\\"use strict\\\";\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\nvar _TreeSelect = _interopRequireDefault(require(\\\"@uiw/react-native/lib/TreeSelect\\\"));\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\nfunction Demo() {\\n  var option = [{\\n    label: '北京',\\n    value: '01',\\n    children: [{\\n      label: '东城区',\\n      value: '01-1'\\n    }, {\\n      label: '西城区',\\n      value: '01-2'\\n    }, {\\n      label: '崇文区',\\n      value: '01-3'\\n    }, {\\n      label: '宣武区',\\n      value: '01-4'\\n    }]\\n  }, {\\n    label: '浙江',\\n    value: '02',\\n    children: [{\\n      label: '杭州',\\n      value: '02-1',\\n      children: [{\\n        label: '西湖区',\\n        value: '02-1-1'\\n      }, {\\n        label: '上城区',\\n        value: '02-1-2'\\n      }, {\\n        label: '江干区',\\n        value: '02-1-3'\\n      }, {\\n        label: '下城区',\\n        value: '02-1-4'\\n      }]\\n    }, {\\n      label: '宁波',\\n      value: '02-2',\\n      children: [{\\n        label: 'xx区',\\n        value: '02-2-1'\\n      }, {\\n        label: 'yy区',\\n        value: '02-2-2'\\n      }]\\n    }, {\\n      label: '温州',\\n      value: '02-3'\\n    }, {\\n      label: '嘉兴',\\n      value: '02-4'\\n    }, {\\n      label: '湖州',\\n      value: '02-5'\\n    }, {\\n      label: '绍兴',\\n      value: '02-6'\\n    }]\\n  }];\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_TreeSelect[\\\"default\\\"], {\\n    defaultValue: ['01', '01-1'],\\n    options: option,\\n    onChange: function onChange(value, nodes) {\\n      console.log(value, nodes);\\n    }\\n  });\\n}\\nreturn Demo;\",\n    \"language\": \"jsx\",\n    \"value\": \"import React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        label: '北京',\\n        value: '01',\\n        children: [\\n          {\\n            label: '东城区',\\n            value: '01-1',\\n          },\\n          {\\n            label: '西城区',\\n            value: '01-2',\\n          },\\n          {\\n            label: '崇文区',\\n            value: '01-3',\\n          },\\n          {\\n            label: '宣武区',\\n            value: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        label: '浙江',\\n        value: '02',\\n        children: [\\n          {\\n            label: '杭州',\\n            value: '02-1',\\n            children: [\\n              {\\n                label: '西湖区',\\n                value: '02-1-1',\\n              },\\n              {\\n                label: '上城区',\\n                value: '02-1-2',\\n              },\\n              {\\n                label: '江干区',\\n                value: '02-1-3',\\n              },\\n              {\\n                label: '下城区',\\n                value: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            label: '宁波',\\n            value: '02-2',\\n            children: [\\n              {\\n                label: 'xx区',\\n                value: '02-2-1',\\n              },\\n              {\\n                label: 'yy区',\\n                value: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            label: '温州',\\n            value: '02-3',\\n          },\\n          {\\n            label: '嘉兴',\\n            value: '02-4',\\n          },\\n          {\\n            label: '湖州',\\n            value: '02-5',\\n          },\\n          {\\n            label: '绍兴',\\n            value: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\"\n  },\n  \"115\": {\n    \"name\": 115,\n    \"meta\": {\n      \"background\": \"#bebebe29\"\n    },\n    \"code\": \"\\\"use strict\\\";\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\nvar _TreeSelect = _interopRequireDefault(require(\\\"@uiw/react-native/lib/TreeSelect\\\"));\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\nfunction Demo() {\\n  var option = [{\\n    labels: '北京',\\n    values: '01',\\n    children: [{\\n      labels: '东城区',\\n      values: '01-1'\\n    }, {\\n      labels: '西城区',\\n      values: '01-2'\\n    }, {\\n      labels: '崇文区',\\n      values: '01-3'\\n    }, {\\n      labels: '宣武区',\\n      values: '01-4'\\n    }]\\n  }, {\\n    labels: '浙江',\\n    values: '02',\\n    children: [{\\n      labels: '杭州',\\n      values: '02-1',\\n      children: [{\\n        labels: '西湖区',\\n        values: '02-1-1'\\n      }, {\\n        labels: '上城区',\\n        values: '02-1-2'\\n      }, {\\n        labels: '江干区',\\n        values: '02-1-3'\\n      }, {\\n        labels: '下城区',\\n        values: '02-1-4'\\n      }]\\n    }, {\\n      labels: '宁波',\\n      values: '02-2',\\n      children: [{\\n        labels: 'xx区',\\n        values: '02-2-1'\\n      }, {\\n        labels: 'yy区',\\n        values: '02-2-2'\\n      }]\\n    }, {\\n      labels: '温州',\\n      values: '02-3'\\n    }, {\\n      labels: '嘉兴',\\n      values: '02-4'\\n    }, {\\n      labels: '湖州',\\n      values: '02-5'\\n    }, {\\n      labels: '绍兴',\\n      values: '02-6'\\n    }]\\n  }];\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_TreeSelect[\\\"default\\\"], {\\n    defaultValue: ['01', '01-1'],\\n    options: option,\\n    fieldNames: {\\n      label: \\\"labels\\\",\\n      value: 'values',\\n      children: 'children'\\n    },\\n    onChange: function onChange(value, nodes) {\\n      console.log(value, nodes);\\n    }\\n  });\\n}\\nreturn Demo;\",\n    \"language\": \"jsx\",\n    \"value\": \"import React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        labels: '北京',\\n        values: '01',\\n        children: [\\n          {\\n            labels: '东城区',\\n            values: '01-1',\\n          },\\n          {\\n            labels: '西城区',\\n            values: '01-2',\\n          },\\n          {\\n            labels: '崇文区',\\n            values: '01-3',\\n          },\\n          {\\n            labels: '宣武区',\\n            values: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        labels: '浙江',\\n        values: '02',\\n        children: [\\n          {\\n            labels: '杭州',\\n            values: '02-1',\\n            children: [\\n              {\\n                labels: '西湖区',\\n                values: '02-1-1',\\n              },\\n              {\\n                labels: '上城区',\\n                values: '02-1-2',\\n              },\\n              {\\n                labels: '江干区',\\n                values: '02-1-3',\\n              },\\n              {\\n                labels: '下城区',\\n                values: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '宁波',\\n            values: '02-2',\\n            children: [\\n              {\\n                labels: 'xx区',\\n                values: '02-2-1',\\n              },\\n              {\\n                labels: 'yy区',\\n                values: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '温州',\\n            values: '02-3',\\n          },\\n          {\\n            labels: '嘉兴',\\n            values: '02-4',\\n          },\\n          {\\n            labels: '湖州',\\n            values: '02-5',\\n          },\\n          {\\n            labels: '绍兴',\\n            values: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       fieldNames={{ label: \\\"labels\\\", value: 'values', children: 'children'}}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\"\n  }\n},\n    source: \"TreeSelect 级联选择器\\n---\\n\\n> 🚧 注意：测试版本谨慎使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!-- ![](https://user-images.githubusercontent.com/66067296/147335182-2abf199f-e206-4b4b-9edf-f1c29568d884.gif) -->\\n<!--rehype:style=zoom: 33%;float: right; margin-left: 15px;-->\\n\\n### 基础示例\\n\\n```jsx mdx:preview&background=#bebebe29\\nimport React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        label: '北京',\\n        value: '01',\\n        children: [\\n          {\\n            label: '东城区',\\n            value: '01-1',\\n          },\\n          {\\n            label: '西城区',\\n            value: '01-2',\\n          },\\n          {\\n            label: '崇文区',\\n            value: '01-3',\\n          },\\n          {\\n            label: '宣武区',\\n            value: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        label: '浙江',\\n        value: '02',\\n        children: [\\n          {\\n            label: '杭州',\\n            value: '02-1',\\n            children: [\\n              {\\n                label: '西湖区',\\n                value: '02-1-1',\\n              },\\n              {\\n                label: '上城区',\\n                value: '02-1-2',\\n              },\\n              {\\n                label: '江干区',\\n                value: '02-1-3',\\n              },\\n              {\\n                label: '下城区',\\n                value: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            label: '宁波',\\n            value: '02-2',\\n            children: [\\n              {\\n                label: 'xx区',\\n                value: '02-2-1',\\n              },\\n              {\\n                label: 'yy区',\\n                value: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            label: '温州',\\n            value: '02-3',\\n          },\\n          {\\n            label: '嘉兴',\\n            value: '02-4',\\n          },\\n          {\\n            label: '湖州',\\n            value: '02-5',\\n          },\\n          {\\n            label: '绍兴',\\n            value: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\\n```\\n\\n\\n### 自定义字段名称\\n\\n```jsx mdx:preview&background=#bebebe29\\nimport React from 'react';\\nimport { TreeSelect } from '@uiw/react-native';\\n\\nfunction Demo() {\\n   const option = [\\n      {\\n        labels: '北京',\\n        values: '01',\\n        children: [\\n          {\\n            labels: '东城区',\\n            values: '01-1',\\n          },\\n          {\\n            labels: '西城区',\\n            values: '01-2',\\n          },\\n          {\\n            labels: '崇文区',\\n            values: '01-3',\\n          },\\n          {\\n            labels: '宣武区',\\n            values: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        labels: '浙江',\\n        values: '02',\\n        children: [\\n          {\\n            labels: '杭州',\\n            values: '02-1',\\n            children: [\\n              {\\n                labels: '西湖区',\\n                values: '02-1-1',\\n              },\\n              {\\n                labels: '上城区',\\n                values: '02-1-2',\\n              },\\n              {\\n                labels: '江干区',\\n                values: '02-1-3',\\n              },\\n              {\\n                labels: '下城区',\\n                values: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '宁波',\\n            values: '02-2',\\n            children: [\\n              {\\n                labels: 'xx区',\\n                values: '02-2-1',\\n              },\\n              {\\n                labels: 'yy区',\\n                values: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            labels: '温州',\\n            values: '02-3',\\n          },\\n          {\\n            labels: '嘉兴',\\n            values: '02-4',\\n          },\\n          {\\n            labels: '湖州',\\n            values: '02-5',\\n          },\\n          {\\n            labels: '绍兴',\\n            values: '02-6',\\n          },\\n        ],\\n      }\\n    ]\\n  return (\\n    <TreeSelect\\n       defaultValue={['01','01-1']}\\n       options={option}\\n       fieldNames={{ label: \\\"labels\\\", value: 'values', children: 'children'}}\\n       onChange={(value, nodes) => {\\n          console.log(value, nodes)\\n       }}\\n    />\\n  );\\n}\\nexport default Demo\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|------|------|-----|------|\\n| options | 级联数据 | TreeSelectOption[] | - |\\n| defaultValue | 默认选中项 | string[] | - |\\n| value | 选中项 | string[] | - |\\n| onChange | value 变化时触发 | (value: string[], extend: { options: TreeSelectOption[] }) => void | - |\\n| fieldNames | 自定义 options 中 label value children 的字段 | {{ label: string, value: string, children: string }} \\\\| any | - |\\n| activeColor | 选中文本颜色 | `string` | - |\\n\\n\"\n  }","import Preview from 'src/component/Preview';\nimport md from '@uiw/react-native/lib/TreeSelect/README.md';\n\nconst DEMO = () => <Preview {...md} path=\"/packages/core/src/TreeSelect/README.md\" />;\nexport default DEMO;\n","import { StyleSheet } from 'react-native';\nexport const style = StyleSheet.create({\n  item: {\n    minHeight: 50,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  active_first_item: {\n    backgroundColor: '#fff'\n  },\n  not_active_first_item: {\n    backgroundColor: '#f6f7f9'\n  },\n  active_nth_item: {\n    backgroundColor: '#fef4f3',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  not_active_nth_item: {\n    backgroundColor: '#f6f7f9',\n    borderColor: '#fff',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginLeft: 10,\n    marginBottom: 10\n  }\n});","import React, { useMemo } from 'react';\nimport { usePropsValue } from '../utils/hooks';\nimport { getTreeDeep } from '../utils/tree-select';\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native';\nimport { style } from './styles';\nconst defaultProps = {\n  options: [],\n  fieldNames: {},\n  defaultValue: [],\n  activeColor: '#5847FF'\n};\nexport const TreeSelect = p => {\n  const props = {\n    ...defaultProps,\n    ...p\n  };\n  const labelName = props.fieldNames.label || 'label';\n  const valueName = props.fieldNames.value || 'value';\n  const childrenName = props.fieldNames.children || 'children';\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  });\n  const [deep, optionsMap, optionsParentMap] = useMemo(() => {\n    const deep = getTreeDeep(props.options, childrenName);\n    const optionsMap = new Map();\n    const optionsParentMap = new Map();\n    function traverse(current, children) {\n      children.forEach(item => {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]);\n  const onItemSelect = node => {\n    // 找到父级节点\n    const parentNodes = [];\n    let current = node;\n    while (current) {\n      parentNodes.unshift(current);\n      const next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n    const values = parentNodes.map(i => i[valueName]);\n    setValue(values);\n    props.onChange?.(values, {\n      options: parentNodes\n    });\n  };\n\n  // item样式\n  const activeStyles = (index, isActive, isLast) => {\n    let styles;\n    // 选中第一排\n    if (isActive && index === 0) {\n      styles = {\n        ...style.active_first_item\n      };\n    }\n    // 未选中第一排\n    if (!isActive && index === 0) {\n      styles = {\n        ...style.not_active_first_item\n      };\n    }\n    // 选中后排\n    if (isActive && index !== 0) {\n      styles = {\n        ...style.active_nth_item,\n        borderColor: props.activeColor,\n        marginRight: isLast ? 10 : 0\n      };\n    }\n    // 未选中后排\n    if (!isActive && index !== 0) {\n      styles = {\n        ...style.not_active_nth_item,\n        marginRight: isLast ? 10 : 0\n      };\n    }\n    return styles;\n  };\n  const renderItems = (columnOptions = [], index) => {\n    return columnOptions.map(item => {\n      const isActive = item[valueName] === value[index];\n      const active_font_color = index === 0 ? '#333' : props.activeColor;\n      // 是否是最后一列\n      const isLast = deep - 1 === index;\n      return <TouchableOpacity key={item[valueName]} onPress={() => {\n        if (!isActive) {\n          onItemSelect(item);\n        }\n      }} style={[style.item, {\n        ...activeStyles(index, isActive, isLast)\n      }]}>\n          <Text style={isActive ? {\n          color: active_font_color,\n          fontWeight: 'bold'\n        } : {\n          color: '#666'\n        }}>\n            {item[labelName]}\n          </Text>\n        </TouchableOpacity>;\n    });\n  };\n  const renderColumns = () => {\n    const columns = [];\n    for (let i = 0; i < deep; i++) {\n      let width = `${100 / deep}%`;\n\n      // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n      if (deep === 2 && i === 0) {\n        width = `33.33%`;\n      }\n      if (deep === 2 && i === 1) {\n        width = `66.67%`;\n      }\n      const column = <ScrollView key={i} style={{\n        width,\n        flex: 1,\n        backgroundColor: i === 0 ? '#f6f7f9' : '#fff'\n      }}>\n          {renderItems(i === 0 ? props.options : optionsMap.get(value[i - 1])?.[childrenName], i)}\n        </ScrollView>;\n      columns.push(column);\n    }\n    return columns;\n  };\n  return <View style={{\n    flex: 1,\n    flexDirection: 'row'\n  }}>{renderColumns()}</View>;\n};","import { TreeSelect } from './tree-select';\nexport default TreeSelect;","// 找到树的深度\nexport function getTreeDeep(treeData, childrenName = 'children') {\n  const walker = tree => {\n    let deep = 0;\n    tree.forEach(item => {\n      if (item[childrenName]) {\n        deep = Math.max(deep, walker(item[childrenName]) + 1);\n      } else {\n        deep = Math.max(deep, 1);\n      }\n    });\n    return deep;\n  };\n  return walker(treeData);\n}","import { useRef, useEffect } from 'react';\nimport { usePersistFn, useUpdate } from 'ahooks';\n\n/**\n * 获取上一轮的 props 或 state\n * How to get the previous props or state?\n * https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n * @example\n * ```js\n * function Counter() {\n *   const [count, setCount] = useState(0);\n *   const prevCount = usePrevious(count);\n *   return <h1>Now: {count}, before: {prevCount}</h1>;\n * }\n * ```\n */\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\nexport function usePropsValue(options) {\n  const {\n    value,\n    defaultValue,\n    onChange\n  } = options;\n  const update = useUpdate();\n  const stateRef = useRef(value !== undefined ? value : defaultValue);\n  if (value !== undefined) {\n    stateRef.current = value;\n  }\n  const setState = usePersistFn(v => {\n    if (value === undefined) {\n      stateRef.current = v;\n      update();\n    }\n    onChange?.(v);\n  });\n  return [stateRef.current, setState];\n}","import { useRef } from 'react';\n\nfunction usePersistFn(fn) {\n  var fnRef = useRef(fn);\n  fnRef.current = fn;\n  var persistFn = useRef();\n\n  if (!persistFn.current) {\n    persistFn.current = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return fnRef.current.apply(this, args);\n    };\n  }\n\n  return persistFn.current;\n}\n\nexport default usePersistFn;","var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from 'react';\n\nvar useUpdate = function useUpdate() {\n  var _a = __read(useState({}), 2),\n      setState = _a[1];\n\n  return useCallback(function () {\n    return setState({});\n  }, []);\n};\n\nexport default useUpdate;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Markdown","MarkdownPreview","_templateObject2","getBooleanValue","param","field","defaultValue","Reflect","has","get","_ref","path","mdData","_objectWithoutProperties","_excluded","$dom","useRef","_jsxs","ref","children","_jsx","_objectSpread","disableCopy","source","rehypeRewrite","node","index","parent","_node$children$0$data","type","tagName","data","meta","_node$children$0$data2","isMeta","properties","components","div","_ref2","props","_excluded2","metaData","_node$position","line","position","start","metaId","getMetaId","String","Child","concat","code","value","getURLParameters","CodeLayout","disableCheckered","disableToolbar","disableCode","disablePreview","bordered","copied","background","toolbar","title","codeProps","style","padding","text","Footer","BackTop","speed","_ref3","percent","scrollToTop","Circle","width","onClick","format","Icon","_react","_interopRequireDefault","_TreeSelect","obj","__esModule","createElement","options","label","onChange","nodes","console","log","labels","values","fieldNames","Preview","md","StyleSheet","item","minHeight","display","alignItems","justifyContent","active_first_item","backgroundColor","not_active_first_item","active_nth_item","borderWidth","borderRadius","marginLeft","marginBottom","not_active_nth_item","borderColor","defaultProps","activeColor","p","labelName","valueName","childrenName","_usePropsValue","usePropsValue","_usePropsValue2","_slicedToArray","setValue","_useMemo","useMemo","deep","treeData","arguments","length","undefined","walker","tree","forEach","Math","max","getTreeDeep","optionsMap","Map","optionsParentMap","traverse","current","set","_useMemo2","onItemSelect","_props$onChange","parentNodes","unshift","map","i","call","activeStyles","isActive","isLast","styles","marginRight","renderItems","active_font_color","TouchableOpacity","onPress","Text","color","fontWeight","View","flex","flexDirection","columns","_optionsMap$get","column","ScrollView","push","renderColumns","usePrevious","useEffect","update","useUpdate","stateRef","setState","usePersistFn","v","fn","fnRef","persistFn","args","_i","apply","this","__read","o","n","m","Symbol","iterator","r","e","ar","next","done","error","useState","useCallback","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}