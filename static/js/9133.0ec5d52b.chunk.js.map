{"version":3,"file":"static/js/9133.0ec5d52b.chunk.js","mappings":"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","sources":["component/Preview/Footer.js","component/Preview/index.js","pages/docs/development/components/README.md","pages/docs/development/components/index.tsx","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync","pages/docs/development/components|sync|//.(png%7Cgif%7Cjpg%7Csvg)$"],"sourcesContent":["import { Divider } from 'uiw';\n\nexport default function (props) {\n  const { path } = props;\n  const url = /^http/.test(path || '')\n    ? path\n    : `https://github.com/uiwjs/react-native-uiw/edit/master/${path?.replace(/^\\//, '')}`;\n  return (\n    <div style={{ paddingBlock: 20 }}>\n      {path && url && (\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#333' }}>\n          在Github上编辑本页！\n        </a>\n      )}\n      <Divider type=\"vertical\" />\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/uiwjs/react-native-uiw/issues\"\n        style={{ color: '#333' }}\n      >\n        提交bug\n      </a>\n    </div>\n  );\n}\n","import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\nimport Footer from './Footer';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  /* max-width: 1024px; */\n  width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    return newValue === 'true';\n  }\n  return defaultValue;\n};\n\nconst Preview = ({ path, ...mdData }) => {\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        {...mdData}\n        disableCopy={true}\n        // transformImageUri={transformImageUri}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  disableToolbar={getBooleanValue(param, 'disableToolbar', false)}\n                  disableCode={getBooleanValue(param, 'disableCode', false)}\n                  disablePreview={getBooleanValue(param, 'disablePreview', false)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                  copied={getBooleanValue(param, 'copied', true)}\n                  background={param.background}\n                  toolbar={param.title || '示例'}\n                  code={<code {...rest} />}\n                  text={code}\n                >\n                  <Child />\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <Footer path={path} />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: {  },\n    data: {},\n    source: \"参与组件开发\\n===\\n\\n当前 [`react-native-uiw`](https://github.com/uiwjs/react-native-uiw) 项目工程，使用 [Yarn](https://classic.yarnpkg.com/lang/en/) & [lerna](https://github.com/lerna/lerna)  构建 `monorepo`，整个里面包含 `example` 示例、`packages` 组件包、`website` 文档网站。\\n\\n> 🚧 `注意事项:示例依赖不可随意更新`<!--rehype:style=background: #da0000; color: #fff;-->\\n> 1. 🪲 添加新依赖包，需要配置 [nohoist](https://github.com/uiwjs/react-native-uiw/blob/46f73cf7ca5404184df7fa996a33f821d45cf0e7/package.json#L62-L80)，以解决子包依赖不存在的问题。\\n> 2. 📦 如果依赖本地包，React Native 示例需要更改 [metro](https://github.com/facebook/metro) 配置 [metro.config.js](https://github.com/uiwjs/react-native-uiw/blob/9a300184608c71615167c517433bb9aed606f0ec/example/examples/metro.config.js#L12)\\n> 3. 🐛Pod 版本请根据项目安装，可以在 `ios/Podfile`<!--rehype:style=color: #e00000;--> 中确定使用那个版本的 `pod`\\n> 4. ✅ 组件仅支持 `react-native@0.60+`<!--rehype:style=color: #e00000;--> 以上的版本。\\n> 5. ⛳️ [React Navigation 6](https://github.com/react-navigation/react-navigation) 至少需要 [react-native@0.63.0](https://github.com/facebook/react-native)。 如果您使用的是 Expo，则您的 SDK 版本需要至少为 41。 \\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n## 目录结构\\n\\n```bash\\n├── README.md -> packages/core/README.md\\n├── example\\n│   ├── base     # 🐝 用于单个组件实例测试\\n│   │   ├── ....\\n│   │   ├── lib  # 🔄 解决预览组件生成的临时目录\\n│   │   └── metro.config.js\\n│   └── examples # 🐝 所有组件实例\\n│       ├── ....\\n│       ├── lib  # 🔄 解决预览组件生成的临时目录\\n│       └── metro.config.js\\n├── lerna.json\\n├── package.json\\n└── packages\\n    ├── core    # 📦 @uiw/react-native 组件源码\\n    │   ├── lib # 🔄 剔除类型的源码输出目录\\n    │   ├── src\\n    │   │   ├── Avatar\\n    │   │   ├── ....\\n    │   │   └── index.tsx\\n    │   └── tsconfig.json\\n    └── docs    # 📦 @uiw/react-native-doc 可忽略，编译后的组件文档静态文件提交到 npm 提供文档版本预览\\n```\\n\\n## 启动项 APP 预览示例\\n\\n我们通过几个步骤，帮助您启动项目中的组件示例 `example/examples`<!--rehype:style=color: #039423; background: #e3efe7;--> APP 应用实例。\\n\\n### `第 1 步`<!--rehype:style=background: #a5d4ff;--> 克隆项目 & 安装依赖\\n\\n```bash\\n# 克隆项目\\ngit clone git@github.com:uiwjs/react-native-uiw.git\\n```\\n\\n安装依赖，【根目录】运行命令，保持版本号一致，所有子包都会自动安装\\n\\n```bash\\nyarn install\\n```\\n\\n安装  iOS 依赖库，详情可参考 `iOS 环境安装`\\n\\n```bash\\n# 进入示例中的 iOS 目录\\ncd example/examples/ios\\n# 安装 iOS 依赖库\\npod install\\n\\n# 如果安装错误，重新安装\\nrm Podfile.lock\\npod install\\n# Reinstall pods\\npod install --repo-update --verbose\\n```\\n\\n\\n> 🚧 目前 [react-native@0.64](https://github.com/facebook/react-native) 需要 `pod v1.10.0+`<!--rehype:style=color: #0ab100;--> 以上的版本，可以在 `ios/Podfile`<!--rehype:style=color: #e00000;--> 中确定使用那个版本的 `pod`。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### `第 2 步`<!--rehype:style=background: #a5d4ff;--> 启动实时编译包\\n\\n```bash\\nnpm run lib:watch  # 编译组件\\nnpm run lib:watch:base # 将组建编译到 base 示例中\\nnpm run lib:watch:examples # 将组建编译到 examples 示例中\\n```\\n\\n将组件源码编译到 `packages/core/lib`<!--rehype:style=color: #039423; background: #e3efe7;-->、`example/base/lib`<!--rehype:style=color: #039423; background: #e3efe7;-->、`example/examples/lib`<!--rehype:style=color: #039423; background: #e3efe7;--> 目录中。\\n\\n```bash\\n├── example\\n│   ├── base\\n│   │   └── lib  #   ◀┈┈┤  🔄  生成组件源码\\n│   └── examples #      ┆\\n│       └── lib  #   ◀┈┈┤  🔄  生成组件源码\\n└── packages     #      ┆\\n    └── core     #      ┆  📦  \\n        ├── lib  #   ◀┈┈┤  🔄  剔除 TS 类型的源码输出目录 \\n        └── src  #→▶┈▶▷┈╯  ✅  组件源码\\n```\\n\\n### `第 3 步`<!--rehype:style=background: #a5d4ff;--> 启动 APP 应用\\n\\n```bash\\n# 进入示例根目录\\ncd example/examples\\n# 启动 & 编译应用\\nyarn run ios\\n```\\n\\n## Workspaces\\n\\n我们通过 [`yarn workspaces`](https://classic.yarnpkg.com/en/docs/workspaces) 这个功能可以减轻 `monorepo` 开发人员的痛苦，并在效率（尽可能多地提升）和可用性之间取得平衡。\\n\\n> 🚧 如果需要将文档网站和实例运行起来，需要先安装依赖和编译包。使用 [`yarn workspaces`](https://classic.yarnpkg.com/en/docs/workspaces)，组件文档是从 `node_modules` 中加载，需要编译(或监听)输出到 `node_modules` 中。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### `问题是什么 ？`\\n\\n首先，让我们快速浏览一下 `hoist` 在独立项目中的工作原理：\\n\\n为了减少冗余，大多数包管理器采用某种提升方案，来尽可能多地提取和扁平化所有相关模块到一个集中位置。 在一个独立的项目中，依赖树可以像这样减少：\\n\\n![](./standalone.svg)<!--rehype:style=max-width: 580px;-->\\n\\n使用 `hoist`，我们能够消除重复的 `A@1.0` 和 `B@1.0`，同时保留版本变化 (`B@2.0`) 并保持相同的根 `package-1/node_modules`。 大多数crawlers/loaders/bundlers 可以通过从项目根目录向下遍历 `node_modules` 树来非常有效地定位模块。\\n\\n然后是 `monorepo` 项目，它引入了一个新的层次结构，不需要通过 `node_modules` 链接。在这样的项目中，模块可能分散在多个位置：\\n\\n![](./monorepo-2.svg)<!--rehype:style=max-width: 580px;-->\\n\\n[`yarn workspaces`](https://classic.yarnpkg.com/en/docs/workspaces) 可以通过将模块提升到其父项目的 `node_modules`: `monorepo/node_modules` 来跨子项目/包共享模块。 当考虑到这些包很可能相互依赖（拥有 monorepo 的主要原因）时，这种优化变得更加突出，即更高程度的冗余。\\n\\n### `找不到模块！！`\\n\\n虽然看起来我们可以从项目的根节点 `node_modules` 访问所有模块，但我们经常在其本地项目中构建每个包，其中模块可能在其自己的 `node_modules` 下不可见。 此外，并非所有 `crawlers` 都会遍历符号链接(link)。\\n\\n因此，`workspaces` 开发人员在从子项目构建时经常会看到 `找不到模块` 相关的错误：\\n\\n- 无法从项目根 `monorepo` 中找到模块 `B@2.0`（无法遵循符号链接link）\\n- 无法从 `package-1` 中找到模块 `A@1.0`（不知道上面 `monorepo` 中的模块树）\\n\\n为了让这个 `monorepo` 项目从任何地方可靠地找到任何模块，它需要遍历每个 `node_modules` 树：`monorepo/node_modules` 和 `monorepo/packages/package-1/node_modules` 。\\n\\n### `修复问题`\\n\\n我们有很多方法修正这种问题，例如多个根目录，自定义模块映射方案等等。\\n\\n通过配置 [`nohoist`](https://github.com/uiwjs/react-native-uiw/blob/46f73cf7ca5404184df7fa996a33f821d45cf0e7/package.json#L62-L80) 使 `workspaces` 能够使用与其提升方案不兼容的第 3 方库。 这个想法是禁用选定的模块被提升到项目根目录。 它们被放置在实际的（子）项目中，就像在一个独立的、非工作区的项目中一样。\\n\\n在私有项目根目录下，使用 nohoist：\\n\\n```js\\n\\\"workspaces\\\": {\\n  \\\"packages\\\": [\\\"packages/*\\\"],\\n  \\\"nohoist\\\": [\\\"**/react-native\\\", \\\"**/react-native/**\\\"]\\n}\\n```\\n\\n在私有项目根目录下，没有 nohoist：\\n\\n```js\\n\\\"workspaces\\\": {\\n  \\\"packages\\\": [\\\"packages/*\\\"],\\n}\\n```\\n\\n在私有子项目下，使用 nohoist：\\n\\n```js\\n\\\"workspaces\\\": {\\n  \\\"nohoist\\\": [\\\"react-native\\\", \\\"react-native/**\\\"]\\n}\\n```\\n\\n`nohoist` 规则只是一组 `glob` 模式，用于匹配其依赖树中的模块路径。 模块路径是依赖树的虚拟路径，而不是实际的文件路径，因此无需在 `nohoist` 模式中指定 `node_modules` 或 `packages`。\\n\\n\\n#### `自定义模块映射方案`\\n\\n[`react-native-uiw`](https://github.com/uiwjs/react-native-uiw) 提供了一种通过 [metro.config.js](https://github.com/uiwjs/react-native-uiw/blob/9a300184608c71615167c517433bb9aed606f0ec/example/examples/metro.config.js#L12) 配置多根的方法。 通过 `metro.config.js` 中配置 [`extraNodeModules`](https://facebook.github.io/metro/docs/configuration#extranodemodules) 需要映射的模块\\n\\n```js\\nconst path = require('path');\\n\\nmodule.exports = {\\n  resolver: {\\n    extraNodeModules: {\\n      '@uiw/react-native': path.resolve(`${__dirname}/lib/`),\\n      // '@uiw/react-native': path.resolve(`${__dirname}/../../packages/core/`),\\n      // 'react-native-svg': path.resolve(\\n      //   `${__dirname}/../../node_modules/react-native-svg/`,\\n      // ),\\n    }\\n  },\\n  // ....\\n};\\n```\\n\\n> 🚧 注意：虽然配置模块依赖映射，可以映射到具体的模块/包目录中，但是还是会报错，因为模块中的依赖路径导致错误。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n在 TypeScript 仍然会出错，将在 [`example/examples/tsconfig.json`](https://github.com/uiwjs/react-native-uiw/blob/fe25f853fcdbe3590c3ac89924bf71326f11c58c/example/examples/tsconfig.json#L40-L44) 中配置，导入重新映射到相对于 `baseUrl` 的查找位置的一系列目录。\\n\\n```js\\n/* 用于解析非绝对模块名称的基目录。*/\\n\\\"baseUrl\\\": \\\"./\\\", \\n/* 将导入重新映射到相对于“baseUrl”的查找位置的一系列条目。 */\\n\\\"paths\\\": {\\n  \\\"@uiw/react-native\\\": [\\\"node_modules/@uiw/react-native/src/index\\\"]\\n},\\n```\\n\"\n  }","import Preview from 'src/component/Preview';\nimport md from './README.md';\n\nconst transformImageUri = (url: string) => {\n  const reqImage = (require as any).context!('./', true, /\\.(png|gif|jpg|svg)$/);\n  const urlAddr = reqImage(url);\n  return urlAddr;\n};\n\nconst DEMO = () => (\n  <Preview\n    {...md}\n    transformImageUri={transformImageUri}\n    path=\"website/src/pages/docs/development/components/README.md\"\n  />\n);\nexport default DEMO;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;","var map = {\n\t\"./monorepo-2.svg\": 55875,\n\t\"./standalone.svg\": 10929\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 72937;"],"names":["props","path","url","test","replace","style","paddingBlock","href","target","rel","color","type","Wrapper","styled","Markdown","MarkdownPreview","getBooleanValue","param","field","defaultValue","Reflect","has","get","mdData","$dom","useRef","ref","disableCopy","source","rehypeRewrite","node","index","parent","tagName","child","children","properties","ariaHidden","components","code","inline","meta","rest","isMeta","line","position","start","metaId","getMetaId","String","Child","data","value","getURLParameters","disableCheckered","disableToolbar","disableCode","disablePreview","bordered","copied","background","toolbar","title","text","Footer","speed","percent","scrollToTop","width","onClick","format","transformImageUri","require","reqImage","Preview","md","webpackEmptyContext","req","e","Error","keys","resolve","id","module","exports","map","webpackContext","webpackContextResolve","__webpack_require__","o","Object"],"sourceRoot":""}