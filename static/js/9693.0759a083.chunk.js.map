{"version":3,"file":"static/js/9693.0759a083.chunk.js","mappings":"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","sources":["../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../node_modules/react-native-web/dist/exports/PanResponder/index.js","../node_modules/react-native-web/dist/exports/TextInput/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create(config) {\n    var interactionState = {\n      handle: null,\n      shouldCancelClick: false,\n      timeout: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n\n      onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n\n      onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n\n      onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n\n      onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        if (interactionState.timeout) {\n          clearInteractionTimeout(interactionState);\n        }\n\n        interactionState.shouldCancelClick = true;\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n\n      onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n\n      onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n\n      onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n\n      onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n\n      onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n\n      // We do not want to trigger 'click' activated gestures or native behaviors\n      // on any pan target that is under a mouse cursor when it is released.\n      // Browsers will natively cancel 'click' events on a target if a non-mouse\n      // active pointer moves.\n      onClickCapture: event => {\n        if (interactionState.shouldCancelClick === true) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    };\n    return {\n      panHandlers,\n\n      getInteractionHandle() {\n        return interactionState.handle;\n      }\n\n    };\n  }\n\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nfunction clearInteractionTimeout(interactionState) {\n  clearTimeout(interactionState.timeout);\n}\n\nfunction setInteractionTimeout(interactionState) {\n  interactionState.timeout = setTimeout(() => {\n    interactionState.shouldCancelClick = false;\n  }, 250);\n}\n\nexport default PanResponder;","import PanResponder from '../../vendor/react-native/PanResponder';\nexport default PanResponder;","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = props => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = useLocaleContext(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","_accountsForMovesUpTo","_updateGestureStateOnMove","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","shouldCancelClick","timeout","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","clearTimeout","clearInteractionTimeout","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","setInteractionTimeout","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","onClickCapture","stopPropagation","preventDefault","getInteractionHandle","callback","setTimeout","forwardPropsList","Object","assign","forwardedProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","focusTimeout","TextInput","React","props","forwardedRef","inputMode","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selection","selectTextOnFocus","dimensions","height","width","hostRef","handleContentSizeChange","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","contentSize","imperativeRef","clear","isFocused","TextInputState","useLayoutEffect","node","selectionEnd","selectionStart","start","end","isSelectionStale","setSelectionRange","e","setSelection","document","activeElement","component","useElementLayout","useResponderEvents","contextDirection","useLocaleContext","direction","supportedProps","pick","pickProps","enterKeyHint","text","target","select","onKeyDown","shouldBlurOnSubmit","isComposing","keyCode","isEventComposing","key","shiftKey","isDefaultPrevented","blur","onSelect","style","styles","textinput$raw","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","ref","langDirection","getLocaleDirection","writingDirection","createElement","displayName","State","StyleSheet","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"sourceRoot":""}