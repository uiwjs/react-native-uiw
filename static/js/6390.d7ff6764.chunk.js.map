{"version":3,"file":"static/js/6390.d7ff6764.chunk.js","mappings":"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","sources":["../node_modules/react-native-web/dist/exports/ActivityIndicator/index.js","../node_modules/react-native-web/dist/exports/TouchableOpacity/index.js","../node_modules/react-native-web/dist/modules/usePressEvents/PressResponder.js","../node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"animating\", \"color\", \"hidesWhenStopped\", \"size\", \"style\"];\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\nvar createSvgCircle = style => /*#__PURE__*/React.createElement(\"circle\", {\n  cx: \"16\",\n  cy: \"16\",\n  fill: \"none\",\n  r: \"14\",\n  strokeWidth: \"4\",\n  style: style\n});\n\nvar ActivityIndicator = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$animating = props.animating,\n      animating = _props$animating === void 0 ? true : _props$animating,\n      _props$color = props.color,\n      color = _props$color === void 0 ? '#1976D2' : _props$color,\n      _props$hidesWhenStopp = props.hidesWhenStopped,\n      hidesWhenStopped = _props$hidesWhenStopp === void 0 ? true : _props$hidesWhenStopp,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'small' : _props$size,\n      style = props.style,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var svg = /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"100%\",\n    viewBox: \"0 0 32 32\",\n    width: \"100%\"\n  }, createSvgCircle({\n    stroke: color,\n    opacity: 0.2\n  }), createSvgCircle({\n    stroke: color,\n    strokeDasharray: 80,\n    strokeDashoffset: 60\n  }));\n  return /*#__PURE__*/React.createElement(View, _extends({}, other, {\n    accessibilityRole: \"progressbar\",\n    accessibilityValueMax: 1,\n    accessibilityValueMin: 0,\n    ref: forwardedRef,\n    style: [styles.container, style]\n  }), /*#__PURE__*/React.createElement(View, {\n    children: svg,\n    style: [typeof size === 'number' ? {\n      height: size,\n      width: size\n    } : indicatorSizes[size], styles.animation, !animating && styles.animationPause, !animating && hidesWhenStopped && styles.hidesWhenStopped]\n  }));\n});\nActivityIndicator.displayName = 'ActivityIndicator';\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  hidesWhenStopped: {\n    visibility: 'hidden'\n  },\n  animation: {\n    animationDuration: '0.75s',\n    animationKeyframes: [{\n      '0%': {\n        transform: [{\n          rotate: '0deg'\n        }]\n      },\n      '100%': {\n        transform: [{\n          rotate: '360deg'\n        }]\n      }\n    }],\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  },\n  animationPause: {\n    animationPlayState: 'paused'\n  }\n});\nvar indicatorSizes = StyleSheet.create({\n  small: {\n    width: 20,\n    height: 20\n  },\n  large: {\n    width: 36,\n    height: 36\n  }\n});\nexport default ActivityIndicator;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"activeOpacity\", \"delayPressIn\", \"delayPressOut\", \"delayLongPress\", \"disabled\", \"focusable\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"rejectResponderTermination\", \"style\"];\nimport * as React from 'react';\nimport { useCallback, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePressEvents from '../../modules/usePressEvents';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, dimming it.\n */\nfunction TouchableOpacity(props, forwardedRef) {\n  var activeOpacity = props.activeOpacity,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      rejectResponderTermination = props.rejectResponderTermination,\n      style = props.style,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var hostRef = useRef(null);\n  var setRef = useMergeRefs(forwardedRef, hostRef);\n\n  var _useState = useState('0s'),\n      duration = _useState[0],\n      setDuration = _useState[1];\n\n  var _useState2 = useState(null),\n      opacityOverride = _useState2[0],\n      setOpacityOverride = _useState2[1];\n\n  var setOpacityTo = useCallback((value, duration) => {\n    setOpacityOverride(value);\n    setDuration(duration ? duration / 1000 + \"s\" : '0s');\n  }, [setOpacityOverride, setDuration]);\n  var setOpacityActive = useCallback(duration => {\n    setOpacityTo(activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.2, duration);\n  }, [activeOpacity, setOpacityTo]);\n  var setOpacityInactive = useCallback(duration => {\n    setOpacityTo(null, duration);\n  }, [setOpacityTo]);\n  var pressConfig = useMemo(() => ({\n    cancelable: !rejectResponderTermination,\n    disabled,\n    delayLongPress,\n    delayPressStart: delayPressIn,\n    delayPressEnd: delayPressOut,\n    onLongPress,\n    onPress,\n\n    onPressStart(event) {\n      var isGrant = event.dispatchConfig != null ? event.dispatchConfig.registrationName === 'onResponderGrant' : event.type === 'keydown';\n      setOpacityActive(isGrant ? 0 : 150);\n\n      if (onPressIn != null) {\n        onPressIn(event);\n      }\n    },\n\n    onPressEnd(event) {\n      setOpacityInactive(250);\n\n      if (onPressOut != null) {\n        onPressOut(event);\n      }\n    }\n\n  }), [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, setOpacityActive, setOpacityInactive]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n  return /*#__PURE__*/React.createElement(View, _extends({}, rest, pressEventHandlers, {\n    accessibilityDisabled: disabled,\n    focusable: !disabled && focusable !== false,\n    pointerEvents: disabled ? 'none' : undefined,\n    ref: setRef,\n    style: [styles.root, !disabled && styles.actionable, style, opacityOverride != null && {\n      opacity: opacityOverride\n    }, {\n      transitionDuration: duration\n    }]\n  }));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    transitionProperty: 'opacity',\n    transitionDuration: '0.15s',\n    userSelect: 'none'\n  },\n  actionable: {\n    cursor: 'pointer',\n    touchAction: 'manipulation'\n  }\n});\nvar MemoedTouchableOpacity = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(TouchableOpacity));\nMemoedTouchableOpacity.displayName = 'TouchableOpacity';\nexport default MemoedTouchableOpacity;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n\nvar isButtonRole = element => element.getAttribute('role') === 'button';\n\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n\nvar isValidKeyPress = event => {\n  var key = event.key,\n      target = event.target;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return key === 'Enter' || isSpacebar && role === 'button';\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\n\nvar DEFAULT_PRESS_DELAY_MS = 50;\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\n\nexport default class PressResponder {\n  constructor(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  configure(config) {\n    this._config = config;\n  }\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n\n\n  reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  }\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n\n\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  }\n\n  _createEventHandlers() {\n    var start = (event, shouldDelay) => {\n      event.persist();\n\n      this._cancelPressOutDelayTimeout();\n\n      this._longPressDispatched = false;\n      this._selectionTerminated = false;\n      this._touchState = NOT_RESPONDER;\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        this._pressDelayTimeout = setTimeout(() => {\n          this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      this._longPressDelayTimeout = setTimeout(() => {\n        this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = event => {\n      this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = event => {\n      var onPress = this._config.onPress;\n      var target = event.target;\n\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = target.tagName.toLowerCase();\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: event => {\n        var disabled = this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: event => {\n        var disabled = this._config.disabled;\n        var key = event.key,\n            target = event.target;\n\n        if (!disabled && isValidKeyPress(event)) {\n          if (this._touchState === NOT_RESPONDER) {\n            start(event, false); // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          var role = target.getAttribute('role');\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n\n          var _isButtonRole = role === 'button' || role === 'menuitem';\n\n          if (isSpacebarKey && _isButtonRole) {\n            // Prevent spacebar scrolling the window\n            event.preventDefault();\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: event => start(event),\n      onResponderMove: event => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (this._touchActivatePosition != null) {\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: event => end(event),\n      onResponderTerminate: event => {\n        if (event.nativeEvent.type === 'selectionchange') {\n          this._selectionTerminated = true;\n        }\n\n        this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: event => {\n        var _this$_config = this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress; // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: event => {\n        var _this$_config2 = this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n\n          if (this._longPressDispatched || this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: event => {\n        var _this$_config3 = this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n\n\n  _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  }\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n\n\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      // Pressable suppression of contextmenu on windows.\n      // On Windows, the contextmenu is displayed after pointerup.\n      // https://github.com/necolas/react-native-web/issues/2296\n      setTimeout(() => {\n        this._isPointerTouch = false;\n      }, 0);\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress; // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  }\n\n  _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(() => {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  }\n\n  _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  }\n\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n\n}\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"],"names":["_excluded","createSvgCircle","style","React","cx","cy","fill","r","strokeWidth","ActivityIndicator","props","forwardedRef","_props$animating","animating","_props$color","color","_props$hidesWhenStopp","hidesWhenStopped","_props$size","size","other","_objectWithoutPropertiesLoose","svg","height","viewBox","width","stroke","opacity","strokeDasharray","strokeDashoffset","View","_extends","accessibilityRole","accessibilityValueMax","accessibilityValueMin","ref","styles","container","children","indicatorSizes","animation","animationPause","displayName","StyleSheet","alignItems","justifyContent","visibility","animationDuration","animationKeyframes","transform","rotate","animationTimingFunction","animationIterationCount","animationPlayState","small","large","TouchableOpacity","activeOpacity","delayPressIn","delayPressOut","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","rejectResponderTermination","rest","hostRef","useRef","setRef","useMergeRefs","_useState","useState","duration","setDuration","_useState2","opacityOverride","setOpacityOverride","setOpacityTo","useCallback","value","setOpacityActive","setOpacityInactive","pressConfig","useMemo","cancelable","delayPressStart","delayPressEnd","onPressStart","event","isGrant","dispatchConfig","registrationName","type","onPressEnd","pressEventHandlers","usePressEvents","accessibilityDisabled","pointerEvents","undefined","root","actionable","transitionDuration","transitionProperty","userSelect","cursor","touchAction","MemoedTouchableOpacity","DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","Object","freeze","RESPONDER_GRANT","isActiveSignal","signal","isButtonRole","element","getAttribute","isPressStartSignal","isValidKeyPress","key","role","target","PressResponder","config","this","_eventHandlers","_isPointerTouch","_longPressDelayTimeout","_longPressDispatched","_pressDelayTimeout","_pressOutDelayTimeout","_touchState","configure","_config","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","_createEventHandlers","start","shouldDelay","persist","_selectionTerminated","nativeEvent","_receiveSignal","normalizeDelay","setTimeout","_handleLongPress","end","keyupHandler","document","removeEventListener","elementType","tagName","toLowerCase","onStartShouldSetResponder","currentTarget","stopPropagation","onKeyDown","addEventListener","preventDefault","onResponderGrant","onResponderMove","onPressMove","touch","getTouchFromResponderEvent","_touchActivatePosition","deltaX","pageX","deltaY","pageY","Math","hypot","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","_this$_config","onClick","_this$_config2","altKey","onContextMenu","_this$_config3","defaultPrevented","prevState","nextState","console","error","_performTransitionSideEffects","isTerminalSignal","isPrevActive","isNextActive","_activate","_deactivate","_this$_config4","_onLongPress","_this$_config5","onPressChange","_this$_config6","clearTimeout","delay","min","fallback","max","_event$nativeEvent","changedTouches","touches","length","pressResponderRef","current","pressResponder","useEffect","reset","useDebugValue","getEventHandlers"],"sourceRoot":""}