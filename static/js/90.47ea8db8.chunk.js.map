{"version":3,"sources":["../../packages/core/lib/List/README.md"],"names":[],"mappings":"sGAAA,OAAe","file":"static/js/90.47ea8db8.chunk.js","sourcesContent":["export default \"List 列表\\n---\\n\\n单个连续模块垂直排列，显示当前的内容、状态和可进行的操作。eg：联系人列表。\\n\\n<img src='https://user-images.githubusercontent.com/66067296/139397639-1bb004ac-fd66-495e-8991-6b6910f84e60.png' alt='List1' style='zoom:33%;' />\\n<img src='https://user-images.githubusercontent.com/66067296/139397695-5de2fb65-4931-454b-baed-9115a80abebc.png' alt='List2' style='zoom:33%;' />\\n\\n### 基础示例\\n\\n<!--DemoStart--> \\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { List } from '@uiw/react-native';\\n\\nexport default function Demo() {\\n  return (\\n    <List>\\n      <List.Item style={{ height: 50 }}>\\\"X战警新变种人\\\"首曝海报特写诡异人脸</List.Item>\\n      <List.Item>六大变五大？传迪士尼600亿收购福斯</List.Item>\\n      <List.Item>快跑!《侏罗纪世界2》正式预告要来了</List.Item>\\n      <List.Item>\\n        <View>\\n          <Text>因为爱过，所以慈悲；因为懂得，所以宽容。</Text>\\n        </View>\\n      </List.Item>\\n    </List>\\n  );\\n}\\n```\\n<!--End-->\\n\\n### 简单\\n\\n<!--DemoStart--> \\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { List } from '@uiw/react-native';\\n\\nexport default function Demo() {\\n  return (\\n    <List\\n      data={[\\n        { date: '8月12日', time: '18:25', orderCode: 'SO18081200005', transCode: '123456', weight: '69.5Kg', money: '+241.00元', type: '收入' },\\n        { date: '8月10日', time: '12:01', orderCode: 'SO18081000004', transCode: '123789', weight: '968.6Kg', money: '+8834.00元', type: '收入' },\\n        { date: '8月2日', time: '10:08', orderCode: 'SO18080200003', transCode: '309876', weight: '465.6Kg', money: '-2520.00元', type: '支出' },\\n        { date: '8月1日', time: '09:30', orderCode: 'SO18080100002', transCode: '783456', weight: '169.3Kg', money: '+1526.00元', type: '收入' },\\n        { date: '8月1日', time: '06:47', orderCode: 'SO18080100001', transCode: '456234', weight: '395.6Kg', money: '+3234.00元', type: '收入' }\\n      ]}\\n      renderItem={({ item }) => {\\n        return (\\n          <View>\\n            <Text>{item.date}</Text>\\n            <Text>{item.time}</Text>\\n          </View>\\n        );\\n      }}\\n    />\\n  )\\n}\\n```\\n<!--End-->\\n\\n\\n### 基础示例\\n\\n<!--DemoStart--> \\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { List, Icon } from '@uiw/react-native';\\n\\nexport default function Demo() {\\n  return (\\n    <List\\n      flat={true}\\n      data={[\\n        { date: '8月12日', title: '这里是标题', des: '这里是详情内容' },\\n        { date: '8月10日', title: 'SO18081000004', des: '这里是详情内容' },\\n        { date: '8月2日', title: 'SO18080200003', des: '这里是详情内容' },\\n        { date: '8月1日', title: 'SO18080100002', des: '这里是详情内容' },\\n        { date: '8月1日', title: 'SO18080100001', des: '这里是详情内容' }\\n      ]}\\n      renderItem={({ item, index }) => {\\n        return (\\n          <List.Item\\n            key={index}\\n            extra={<Icon name=\\\"right\\\" fill=\\\"#abb0b5\\\" size={14} />}\\n            size=\\\"large\\\"\\n            paddingLeft={15}\\n            style={{ borderBottomWidth: 0, }}\\n            onPress={() => { }}\\n          >\\n            <View>\\n              <Text>{item.title}</Text>\\n              <View>\\n                <Text>{item.des}</Text>\\n              </View>\\n            </View>\\n          </List.Item>\\n        )\\n      }}\\n    />\\n  );\\n}\\n```\\n<!--End-->\\n\\n### Props\\n\\n### List\\n\\n`flat={true}` 继承 [`FlatList`](https://facebook.github.io/react-native/docs/flatlist#props) 组件。如果使用 `data` 和 `renderItem` 则 `<List.Item />` 将不起作用，`flat={false}` 时继承 [View](https://facebook.github.io/react-native/docs/view#props) 组件。\\n\\n| 参数 | 说明 | 类型 | 默认值|\\n|------|------|-----|------|\\n| `data` | 渲染头部 | [] | - |\\n| `flat` | 当值为 `true` 使用 `FlatList` 组件渲染列表，当值为 `false` 时，使用 `View` 渲染界面 | Boolean | `true` |\\n| `renderItem` | 当使用 `data` 时，可以用 `renderItem` 自定义渲染列表项 | ({item}) => { } | - |\\n| `title` | 设置所有 `Item` 左边补白 | Number | `16` |\\n| `titleStyle` | 当设置 `title` 参数之后可以设置其标题容器样式。| ViewStyle | - |\\n| `horizontal` | 设置为 `true` 则变为水平布局模式。(`flat=true` 支持) | Boolean | `false` |\\n| `numColumns` | 多列布局只能在非水平模式下使用，即必须是 `horizontal={false}`。此时组件内元素会从左到右从上到下按 `Z` 字形排列，类似启用了 `flexWrap` 的布局。组件内元素必须是等高的——暂时还无法支持瀑布流布局。(`flat=true` 支持) | Number | - |\\n| `ListHeaderComponent` | 呈现在列表的顶部。如果设置了 `title` 标题，这个参数将失效  | ReactNode | - |\\n| `ListEmptyComponent` | 当列表数据为空的时候显示，条件是`renderItem` 存在 `data` 为 `0` 或者 `空`，或者是 `renderItem` 不存在 `children` 数量为 `0` | ReactNode | - |\\n| `refreshing` | 等待刷新之前的新数据时，将其设置为 `true`。 (`flat=true` 支持)| Boolean | - |\\n| `onRefresh` | 下拉刷新，配合 `refreshing` 使用。 (`flat=true` 支持)| () => void | - |\\n| `onEndReached` | 滚动位置位于渲染内容的 `onEndReachedThreshold` 范围内时调用一次。 (`flat=true` 支持)| (info: {distanceFromEnd: number}) => void | - |\\n| `onEndReachedThreshold` | 要触发 `onEndReached` 回调，列表的底边必须与内容的末尾相距多远（以列表的可见长度为单位）。 因此，当内容的结尾在列表的可见长度的一半以内时，值为 `0.5` 将触发 `onEndReached`。 (`flat=true` 支持) | Number | - |\\n\\n### List.Item\\n\\n继承 [`ViewProps`](https://facebook.github.io/react-native/docs/view#props) 当 `onPress` 存在则继承 [`TouchableHighlight`](https://facebook.github.io/react-native/docs/touchablehighlight#props)。\\n\\n\\n| 参数 | 说明 | 类型 | 默认值|\\n|------|------|-----|------|\\n| `onPress` | 释放触摸时调用，但如果取消则不调用（例如通过窃取响应者锁定的滚动）。 | (event: GestureResponderEvent) => void | - |\\n| `touchableStyle` | 设置 `onPress` 可以设置样式。 | ViewStyle | - |\\n| `underlayColor` | 当 `onPress` 存在设置 `underlayColor` 点击后的激活颜色 | String | `#DADADA` |\\n\\n### 共同属性\\n\\n| 参数 | 说明 | 类型 | 默认值|\\n|------|------|-----|------|\\n| `size` | 单元格大小 | `small`, `default`, `large` | List`default`, List.Item '-' |\\n| `extra` | 额外内容，展示右侧内容 | ReactNode | - |\\n| `extraStyle` | 设置 `extra` 包裹样式 | ViewProps['style'] | TextProps['style'] | - |\\n| `paddingLeft` | 左边补白 | Number | `16` |\";"],"sourceRoot":""}