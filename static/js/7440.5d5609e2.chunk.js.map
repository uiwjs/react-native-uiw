{"version":3,"file":"static/js/7440.5d5609e2.chunk.js","mappings":"kQAOMA,EAAUC,EAAAA,GAAAA,IAAU,8KAWpBC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,EAAPF,CAAuB,gFAKlCG,EAAkB,SAACC,EAAOC,EAAOC,GACrC,GAAIC,QAAQC,IAAIJ,EAAOC,GAAQ,CAC7B,IAAMI,EAAWF,QAAQG,IAAIN,EAAOC,GACpC,GAAiB,SAAbI,EACF,OAAO,EAET,GAAiB,UAAbA,EACF,OAAO,CAEX,CACA,OAAOH,CACT,EA+DA,IA7DgB,SAACK,GACf,IAAMC,GAAOC,EAAAA,EAAAA,QAAO,MACpB,OACE,UAACd,EAAO,CAACe,IAAKF,EAAK,WACjB,SAACX,EAAQ,CACPc,aAAa,EACbC,OAAQL,EAAOK,OACfC,cAAe,SAACC,EAAMC,EAAOC,GAC3B,GAAkB,YAAdF,EAAKG,MAAsBD,GAA0B,SAAhBA,EAAOC,MAAmB,iBAAiBC,KAAKJ,EAAKK,SAAU,CACtG,IAAMC,EAAQN,EAAKO,UAAYP,EAAKO,SAAS,GACzCD,GAASA,EAAME,YAA8C,SAAhCF,EAAME,WAAWC,aAChDH,EAAMC,SAAW,GAErB,CACF,EACAG,WAAY,CACVC,KAAM,YAAiC,IAAD,EAA7BC,EAAM,EAANA,OAAQZ,EAAI,EAAJA,KAASa,GAAK,YACRC,EAAkBD,EAA/B,aAAsBE,GAAI,OAAKF,EAAK,GAC5C,GAAID,KAAWI,EAAAA,EAAAA,IAAOF,GACpB,OAAO,2BAAUD,IAEnB,IAAMI,EAAoB,QAAhB,EAAGjB,EAAKkB,gBAAQ,aAAb,EAAeC,MAAMF,KAC5BG,GAASC,EAAAA,EAAAA,IAAUP,IAASQ,OAAOL,GACnCM,EAAQ9B,EAAOiB,WAAW,GAAD,OAAIU,IACnC,GAAIA,GAA2B,oBAAVG,EAAsB,CACzC,IAAMZ,EAAOlB,EAAO+B,KAAKJ,GAAQK,OAAS,GACpCvC,GAAQwC,EAAAA,EAAAA,IAAiBZ,GAC/B,OACE,SAAC,IAAU,CACTa,iBAAkB1C,EAAgBC,EAAO,oBAAoB,GAC7D0C,eAAgB3C,EAAgBC,EAAO,kBAAkB,GACzD2C,YAAa5C,EAAgBC,EAAO,eAAe,GACnD4C,eAAgB7C,EAAgBC,EAAO,kBAAkB,GACzD6C,SAAU9C,EAAgBC,EAAO,YAAY,GAC7C8C,OAAQ/C,EAAgBC,EAAO,UAAU,GACzC+C,WAAY/C,EAAM+C,WAClBC,QAAShD,EAAMiD,OAAS,eACxBxB,MAAM,2BAAUI,IAChBqB,KAAMzB,EAAK,UAEX,SAACY,EAAK,KAGZ,CACA,OAAO,2BAAUR,GACnB,MAGJ,SAAC,KAAO,CAACsB,MAAO,IAAI,SACjB,gBAAGC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YAAW,OACtB,SAAC,KAAM,CACLC,MAAO,GACPC,QAAS,kBAAMF,GAAa,EAC5BG,OAAQ,kBAAM,SAAC,KAAI,CAACvC,KAAK,YAAa,EACtCmC,QAASA,GACD,MAKpB,C,0GC/FA,GACI5B,WAAY,CAAG,EACfc,KAAM,CAAC,EACP1B,OAAQ,6+S,WCAZ,EADa,WAAH,OAAS,SAAC6C,EAAA,GAAO,UAAKC,GAAO,C,oBCHvC,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEpC,KAAO,mBACHoC,CACP,CACAF,EAAoBI,KAAO,WAAa,MAAO,EAAI,EACnDJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR,C","sources":["component/Preview/index.js","react-native/lib/Form/README.md","pages/components/form/index.tsx","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  max-width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    if (newValue === 'true') {\n      return true;\n    }\n    if (newValue === 'false') {\n      return false;\n    }\n  }\n  return defaultValue;\n};\n\nconst Preview = (mdData) => {\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        disableCopy={true}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  disableToolbar={getBooleanValue(param, 'disableToolbar', false)}\n                  disableCode={getBooleanValue(param, 'disableCode', false)}\n                  disablePreview={getBooleanValue(param, 'disablePreview', false)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                  copied={getBooleanValue(param, 'copied', true)}\n                  background={param.background}\n                  toolbar={param.title || '示例'}\n                  code={<code {...rest} />}\n                  text={code}\n                >\n                  <Child />\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: {  },\n    data: {},\n    source: \"Form 表单\\n---\\n\\n集成react-native-uiw表单控件,并支持自定义组件\\n\\n> 🚧 注意：测试版本谨慎使用。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n### 基础示例\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = { name: '王滴滴' };\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n}\\n```\\n<!--End-->\\n\\n### form.validateFields进行表单验证提交\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,Toast } from 'react-native';\\nimport { Form,Button } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      attr: {},\\n      required: true,\\n      validate: (val) => (!val ? `请输入name` : ''),\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n        <Button\\n          type=\\\"primary\\\"\\n          onPress={() => {\\n            form\\n              .validateFields()\\n              .then((values) => Toast.success(JSON.stringify(values)))\\n              .catch((errors) => Toast.warning(JSON.stringify(errors)));\\n          }}>\\n          确定\\n        </Button>\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### customComponentList自定义表单组件\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,Slider } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const customComponentList = {\\n      render: <Slider />,\\n  }\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      required: true,\\n    },\\n    {\\n      type: 'render',\\n      field: 'render',\\n      name: '自定义',\\n    },\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items}  customComponentList={customComponentList} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### watch监听表单变化\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView } from 'react-native';\\nimport { Form } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const watch = {\\n    name: (value) => console.log('value', value)\\n  }\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'input',\\n      field: 'name',\\n      name: '输入框',\\n      required: true,\\n    }\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} watch={watch} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### 动态添加表单list(当type为cardList时)\\n\\n> ⚠️ 警告:\\n  1.目前仅能嵌套一层cardList\\n  2.我们暂时无法验证到添加的表单项里的每一个字段<!--rehype:style=background: #F08800; color: #fff;-->。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n<!--DemoStart--> \\n```jsx\\nimport { SafeAreaView,View,Text } from 'react-native';\\nimport { Form,Button,Flex } from '@uiw/react-native';\\n\\nconst FormDemo = () => {\\n  const form = Form.useForm();\\n  const initialValues = {name: ''};\\n  const items = [\\n    {\\n      type: 'cardList',\\n      field: 'cardList',\\n      name: '联系人集合',\\n      renderHeader: (i, { remove ,moveUp,moveDown,moveToTop,moveToBottom }) => (\\n        <View style={{marginTop: 12, display: 'flex', justifyContent: 'space-between', flexDirection: 'row'}}>\\n          <View>\\n            <Text>{`联系人${i + 1}`}</Text>\\n          </View>\\n          <Flex>\\n            <Text style={{marginRight:5}}  onPress={() => moveUp()}>上移</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveDown()}>下移</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveToTop()}>置顶</Text>\\n            <Text style={{marginRight:5}}  onPress={() => moveToBottom()}>置底</Text>\\n            <Text onPress={() => remove()}>删除</Text>\\n          </Flex>\\n        </View>\\n      ),\\n      renderAdd: ({ add }) => (\\n        <View style={{marginTop: 12}}>\\n          <Button onPress={() => add()} type=\\\"primary\\\" size=\\\"default\\\" bordered={false}>\\n            新增数据\\n          </Button>\\n        </View>\\n      ),\\n      items: [\\n        {\\n          type: 'input',\\n          field: 'name',\\n          name: '联系人姓名',\\n        },\\n        {\\n          type: 'input',\\n          field: 'phone',\\n          name: '联系人电话',\\n        },\\n      ],\\n    },\\n  ];\\n  return (\\n    <SafeAreaView>\\n      <Form form={form} schema={items} initialValues={initialValues} />\\n    </SafeAreaView>\\n  );\\n};\\n```\\n<!--End-->\\n\\n### class组件获取form\\n\\n<!--DemoStart--> \\n```jsx\\nimport React from 'react'\\nimport { SafeAreaView } from 'react-native';\\nimport { Form, Button } from '@uiw/react-native';\\n\\nclass FormDemo extends React.Component {\\n  render(){\\n    const { form } = this.props\\n    const schema = [\\n      {\\n        type: 'input',\\n        field: 'name',\\n        name: '输入框',\\n        attr: {},\\n        required: true,\\n        validate: (val) => (!val ? `请输入name` : ''),\\n      }\\n    ];\\n    return (\\n      <SafeAreaView>\\n        <Form\\n          form={form}\\n          schema={schema}\\n          initialValues={{ name: '王滴滴' }}\\n        />\\n        <Button\\n          type=\\\"primary\\\"\\n          onPress={() => form.validateFields().then((values) => {}).catch((errors) => {}) }>\\n            确定\\n        </Button>\\n      </SafeAreaView>\\n    );\\n  }\\n}\\n\\nconst FormComponent = Form.create(FormDemo)\\n\\nexport default FormComponent;\\n```\\n<!--End-->\\n\\n\\n\\n### FormProps\\n```ts\\ninterface FormProps<FormData = any, FieldValue = FormData[keyof FormData], FieldKey extends KeyType = keyof FormData> {\\n  /**\\n   * 表单集合\\n  */\\n  schema?: FormItemsProps[];\\n  /**\\n   * 经 Form.useForm() 创建的 form 控制实例，不提供时会自动创建\\n  */\\n  form: FormInstance<FormData, FieldValue, FieldKey>;\\n  /**\\n   * 表单默认值，只有初始化以及重置时生效\\n  */\\n  initialValues?: Partial<FormData>;\\n  /**\\n   * 支持默认和卡片两种模式\\n  */\\n  mode?:'default' | 'card';\\n  // 表单是否在onChange时进行验证\\n  changeValidate?: boolean;\\n  // 监听表单字段变化\\n  watch?: Partial<Record<string, (value: unknown) => void>>;\\n  // 自定义组件\\n  customComponentList?: Partial<Record<string, JSX.Element>>;\\n}\\n```\\n\\n### FormItemsProps\\n```ts\\ninterface FormItemsProps {\\n  // 字段名\\n  field: string;\\n  // 字段类型(默认继承了react-native-uiw中的 input | textArea | slider | rate | radio | search | switch | checkBox | stepper ｜ cardList   )\\n  type: string;\\n  // 标签名\\n  name: string;\\n  // 验证规则\\n  validate?: RulesOption['validate'];\\n  options?: Array<{ label: string; value: KeyType }>;\\n  // 表单控件props\\n  attr?: any;\\n  // 展示是否必填\\n  required?: boolean;\\n  // 是否隐藏\\n  hide?:boolean\\n  // 当type为cardList生效,渲染每一项的头部内容\\n  renderHeader?:(index:number,{ remove }:{ remove:()=>void })=>React.ReactNode;\\n  // 当type为cardList生效,渲染添加按钮的文案\\n  renderAdd?:( { add }:{ add:()=>void } )=>React.ReactNode;\\n  // 当type为cardList生效,配置表单项\\n  items?: Omit<FormItemsProps, 'validate' | 'required'>[];\\n}\\n```\\n\\n### FormInstance\\n```ts\\ntype FormInstance<FormData = any, FieldValue = FormData[keyof FormData], FieldKey extends KeyType = keyof FormData> = {\\n  /**\\n   * 获取对应字段名的值\\n  */\\n  getFieldValue: (field: FieldKey) => FieldValue;\\n   /**\\n   * 设置对应字段名的值\\n  */\\n  setFieldValue: (field: FieldKey, value: FieldValue) => void;\\n   /**\\n   * 重制表单\\n  */\\n  resetFieldValue: () => void;\\n  /**\\n   * 触发验证\\n  */\\n  validate: () => Partial<Record<string, string>>;\\n  /**\\n   * 触发表单验证获取表单数据\\n  */\\n  validateFields: () => Promise<FormData> | any;\\n  getInnerMethods: (inner?: boolean) => InnerMethodsReturnType<FormData>;\\n};\\n```\\n\\n\\n\\n\"\n  }","import Preview from 'src/component/Preview';\nimport md from '@uiw/react-native/lib/Form/README.md';\n\nconst DEMO = () => <Preview {...md} />;\nexport default DEMO;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","Markdown","MarkdownPreview","getBooleanValue","param","field","defaultValue","Reflect","has","newValue","get","mdData","$dom","useRef","ref","disableCopy","source","rehypeRewrite","node","index","parent","type","test","tagName","child","children","properties","ariaHidden","components","code","inline","props","meta","rest","isMeta","line","position","start","metaId","getMetaId","String","Child","data","value","getURLParameters","disableCheckered","disableToolbar","disableCode","disablePreview","bordered","copied","background","toolbar","title","text","speed","percent","scrollToTop","width","onClick","format","Preview","md","webpackEmptyContext","req","e","Error","keys","resolve","id","module","exports"],"sourceRoot":""}