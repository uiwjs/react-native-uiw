{"version":3,"sources":["../../packages/core/lib/Picker/README.md"],"names":[],"mappings":"uGAAA,OAAe","file":"static/js/104.e8426fa7.chunk.js","sourcesContent":["export default \"Picker 选择器\\n---\\n\\n解决 ios 与 android 和用户交互方式不同问题.\\n\\n> 避免出现样式错乱问题, 请尽量使用统一整数数字高度。 \\n> 激活状态尽量不要改变高度, 只是修改颜色作为标记。\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 16px;-->\\n\\n![](https://user-images.githubusercontent.com/66067296/139409471-846bdddb-99cc-4b2d-b2da-278da81b0c22.gif)<!--rehype:style=zoom: 33%;float: right; margin-left: 15px;-->\\n\\n### 基础示例\\n \\n```jsx\\nimport { View } from 'react-native';\\nimport { Picker } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <View style={{ flex: 1 }}>\\n      <Picker \\n        data={[\\n          {label: '1'},\\n          {label: '2'},\\n          {label: '3'},\\n          {label: '4'},\\n          {label: '5'},\\n        ]}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n### 使用自定义元素\\n\\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { Picker } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <View style={{ flex: 1 }}>\\n      <Picker \\n        data={[\\n          {label: '1'},\\n          {label: '2'},\\n          {label: '3'},\\n          {label: '4'},\\n          {label: '5'},\\n          {label: '5',render: (label, record, index)=><Text>123</Text>},\\n        ]}\\n      />\\n    </View>\\n  )\\n}\\n```\\n\\n\\n\\n### Props\\n\\n```ts\\nimport { StyleProp, TextStyle, ViewStyle } from 'react-native';\\n\\nexport interface PickerData {\\n  label?: string,\\n  render?: (key: string, record: PickerData, index: number)=>React.ReactNode,\\n  [key: string]: any\\n}\\n\\nexport interface PickerProps {\\n  /** 显示几行, 默认 3 */\\n  lines?: number,\\n  /** 指定需要显示的 key, 默认使用 data 的 label 属性 */\\n  rowKey?: string,\\n  /** 需要渲染的数据 */\\n  data?: Array<PickerData>,\\n  /** item 容器样式 */\\n  containerStyle?: {\\n    /** 激活的容器样式 */\\n    actived?: StyleProp<ViewStyle>,\\n    /** 未激活的容器样式 */\\n    unactived?: StyleProp<ViewStyle>,\\n  },\\n  /** 容器的文本样式 */\\n  textStyle?: {\\n    /** 激活的文本样式 */\\n    actived?: StyleProp<TextStyle>,\\n    /** 未激活的文本样式 */\\n    unactived?: StyleProp<TextStyle>,\\n  },\\n  /** 选中当前项的下标 */\\n  value?: number,\\n  /** value 改变时触发 */\\n  onChange?: (value: number)=>unknown,\\n  /** 是否只读 不能点击不能滑动但可以通过value控制 */\\n  readonly?: boolean\\n}\\n```\\n\";"],"sourceRoot":""}