{"version":3,"file":"static/js/3198.2a1a11c1.chunk.js","mappings":"kQAOMA,EAAUC,EAAAA,GAAAA,IAAU,8KAWpBC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,EAAPF,CAAuB,gFAKlCG,EAAkB,SAACC,EAAOC,EAAOC,GACrC,GAAIC,QAAQC,IAAIJ,EAAOC,GAAQ,CAC7B,IAAMI,EAAWF,QAAQG,IAAIN,EAAOC,GACpC,GAAiB,SAAbI,EACF,OAAO,EAET,GAAiB,UAAbA,EACF,OAAO,CAEX,CACA,OAAOH,CACT,EA+DA,IA7DgB,SAACK,GACf,IAAMC,GAAOC,EAAAA,EAAAA,QAAO,MACpB,OACE,UAACd,EAAO,CAACe,IAAKF,EAAK,WACjB,SAACX,EAAQ,CACPc,aAAa,EACbC,OAAQL,EAAOK,OACfC,cAAe,SAACC,EAAMC,EAAOC,GAC3B,GAAkB,YAAdF,EAAKG,MAAsBD,GAA0B,SAAhBA,EAAOC,MAAmB,iBAAiBC,KAAKJ,EAAKK,SAAU,CACtG,IAAMC,EAAQN,EAAKO,UAAYP,EAAKO,SAAS,GACzCD,GAASA,EAAME,YAA8C,SAAhCF,EAAME,WAAWC,aAChDH,EAAMC,SAAW,GAErB,CACF,EACAG,WAAY,CACVC,KAAM,YAAiC,IAAD,EAA7BC,EAAM,EAANA,OAAQZ,EAAI,EAAJA,KAASa,GAAK,YACRC,EAAkBD,EAA/B,aAAsBE,GAAI,OAAKF,EAAK,GAC5C,GAAID,KAAWI,EAAAA,EAAAA,IAAOF,GACpB,OAAO,2BAAUD,IAEnB,IAAMI,EAAoB,QAAhB,EAAGjB,EAAKkB,gBAAQ,aAAb,EAAeC,MAAMF,KAC5BG,GAASC,EAAAA,EAAAA,IAAUP,IAASQ,OAAOL,GACnCM,EAAQ9B,EAAOiB,WAAW,GAAD,OAAIU,IACnC,GAAIA,GAA2B,oBAAVG,EAAsB,CACzC,IAAMZ,EAAOlB,EAAO+B,KAAKJ,GAAQK,OAAS,GACpCvC,GAAQwC,EAAAA,EAAAA,IAAiBZ,GAC/B,OACE,SAAC,IAAU,CACTa,iBAAkB1C,EAAgBC,EAAO,oBAAoB,GAC7D0C,eAAgB3C,EAAgBC,EAAO,kBAAkB,GACzD2C,YAAa5C,EAAgBC,EAAO,eAAe,GACnD4C,eAAgB7C,EAAgBC,EAAO,kBAAkB,GACzD6C,SAAU9C,EAAgBC,EAAO,YAAY,GAC7C8C,OAAQ/C,EAAgBC,EAAO,UAAU,GACzC+C,WAAY/C,EAAM+C,WAClBC,QAAShD,EAAMiD,OAAS,eACxBxB,MAAM,2BAAUI,IAChBqB,KAAMzB,EAAK,UAEX,SAACY,EAAK,KAGZ,CACA,OAAO,2BAAUR,GACnB,MAGJ,SAAC,KAAO,CAACsB,MAAO,IAAI,SACjB,gBAAGC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YAAW,OACtB,SAAC,KAAM,CACLC,MAAO,GACPC,QAAS,kBAAMF,GAAa,EAC5BG,OAAQ,kBAAM,SAAC,KAAI,CAACvC,KAAK,YAAa,EACtCmC,QAASA,GACD,MAKpB,C,2GC/FA,GACI5B,WAAY,CAAG,EACfc,KAAM,CAAC,EACP1B,OAAQ,mlH,WCCZ,EAFa,WAAH,OAAS,SAAC6C,EAAA,GAAO,UAAKC,GAAO,C,oBCHvC,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEpC,KAAO,mBACHoC,CACP,CACAF,EAAoBI,KAAO,WAAa,MAAO,EAAI,EACnDJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR,C","sources":["component/Preview/index.js","react-native/lib/Typography/README.md","pages/components/typography/index.tsx","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  max-width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    if (newValue === 'true') {\n      return true;\n    }\n    if (newValue === 'false') {\n      return false;\n    }\n  }\n  return defaultValue;\n};\n\nconst Preview = (mdData) => {\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        disableCopy={true}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  disableToolbar={getBooleanValue(param, 'disableToolbar', false)}\n                  disableCode={getBooleanValue(param, 'disableCode', false)}\n                  disablePreview={getBooleanValue(param, 'disablePreview', false)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                  copied={getBooleanValue(param, 'copied', true)}\n                  background={param.background}\n                  toolbar={param.title || '示例'}\n                  code={<code {...rest} />}\n                  text={code}\n                >\n                  <Child />\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: {  },\n    data: {},\n    source: \"Typography 排版\\n---\\n\\n包含 H1~H6,`<U>`, `<S>`, `<P>` 等，类似于 HTML 中的标签。\\n\\n[`H1~H6`](#标题) · [`<Del>`](#删除线) · [`<S>`](#删除线) · [`<U>`](#下划线) · [`<Strong>`](#加粗) · [`<P />`](#段落) · [`<Br />`](#换行) · [`<Hr />`](#水平线) · [`<Div />`](#div)\\n\\n![](https://user-images.githubusercontent.com/57083007/146734264-8cb81fae-c4b5-4e02-9794-627442e580c9.png)<!--rehype:style=zoom: 33%;float: right; margin-left: 15px;-->\\n\\n### 基础示例\\n\\n### 标题\\n\\n```jsx\\nimport { Fragment } from 'react';\\nimport { H1, H2, H3, H4, H5, H6 } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <Fragment>\\n      <H1>这是标题一</H1>\\n      <H2>这是标题二</H2>\\n      <H3>这是标题二</H3>\\n      <H4>这是标题二</H4>\\n      <H5>这是标题二</H5>\\n      <H6>这是标题二</H6>\\n    </Fragment>\\n  );\\n}\\n```\\n\\n### 删除线\\n\\n`<s>` 标签是 `<strike>` 标签的缩写版本\\n\\n```jsx\\nimport { Fragment } from 'react';\\nimport { Del, S } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <Fragment>\\n      <S>这段字符串中间有条删除线</S>\\n      <Del>这段字符串中间有条删除线</Del>\\n    </Fragment>\\n  );\\n}\\n```\\n\\n### 下划线\\n\\n```jsx\\nimport { U } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <U>这段文字有下划线</U>\\n  );\\n}\\n```\\n\\n### 加粗\\n\\n```jsx\\nimport { Strong } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <Strong>这段文字加粗</Strong>\\n  );\\n}\\n```\\n\\n### 换行\\n\\n```jsx\\nimport { Text } from 'react-native';\\nimport { Br } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <Text>文本开始<Br />换行结束</Text>\\n  );\\n}\\n```\\n\\n### 段落\\n\\n```jsx\\nimport { Br } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <P>这是一个段落{`<P>`}</P>\\n  );\\n}\\n```\\n\\n### Div\\n\\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { Div } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Div>这是一段文本{`<Div>`}</Div>\\n      <Div>\\n        <View>\\n          <Text>既可以是 View/Text 组件 也可以是纯字符串 </Text>\\n        </View>\\n      </Div>\\n    </View>\\n  );\\n}\\n```\\n\\n### 水平线\\n\\n```jsx\\nimport { View, Text } from 'react-native';\\nimport { Hr } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <View>\\n      <Text>一段文本</Text>\\n      <Hr />\\n      <Text>一段文本</Text>\\n    </View>\\n  );\\n}\\n```\\n\\n### 可高亮文本 RnText\\n\\n```jsx\\nimport { View } from 'react-native';\\nimport { RnText } from '@uiw/react-native';\\n\\nfunction Demo() {\\n  return (\\n    <View>\\n      <RnText type=\\\"header\\\" label=\\\"react-native-uiw\\\" />\\n      <RnText type=\\\"title\\\" label=\\\"react-native-uiw\\\" />\\n      <RnText type=\\\"label\\\" label=\\\"react-native-uiw\\\" />\\n      <RnText type=\\\"subLabel\\\" label=\\\"react-native-uiw\\\" />\\n      <RnText type=\\\"header\\\" label=\\\"react-native-uiw\\\" highlightText=\\\"native\\\" highlightTextStyle={{ fontSize: 24, color: \\\"red\\\" }} />\\n    </View>\\n  );\\n}\\n```\\n\"\n  }","import Preview from 'src/component/Preview';\nimport md from '@uiw/react-native/lib/Typography/README.md';\n\nconst Demo = () => <Preview {...md} />;\n\nexport default Demo;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","Markdown","MarkdownPreview","getBooleanValue","param","field","defaultValue","Reflect","has","newValue","get","mdData","$dom","useRef","ref","disableCopy","source","rehypeRewrite","node","index","parent","type","test","tagName","child","children","properties","ariaHidden","components","code","inline","props","meta","rest","isMeta","line","position","start","metaId","getMetaId","String","Child","data","value","getURLParameters","disableCheckered","disableToolbar","disableCode","disablePreview","bordered","copied","background","toolbar","title","text","speed","percent","scrollToTop","width","onClick","format","Preview","md","webpackEmptyContext","req","e","Error","keys","resolve","id","module","exports"],"sourceRoot":""}