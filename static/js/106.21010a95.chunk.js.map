{"version":3,"sources":["../../packages/core/lib/SelectCascader/README.md"],"names":[],"mappings":"uGAAA,OAAe","file":"static/js/106.21010a95.chunk.js","sourcesContent":["export default \"SelectCascader 级联选择\\n---\\n\\n可用于类似于省市区选择\\n\\n### 基础示例\\n\\n```jsx\\nimport { Component } from 'react';\\nimport { SelectCascader } from '@uiw/react-native';\\n\\n\\nexport default class SelectCascaderDemo extends Component {\\n  constructor(props: SelectCascaderProps) {\\n    super(props);\\n    this.state = {\\n      visible: false\\n    };\\n  }\\n\\n  onChange(val: any, label: string) {\\n    console.log(\\\"val-------->\\\", val);\\n    console.log(\\\"label-------->\\\", label);\\n  }\\n\\n  render() {\\n    const data = [\\n      {\\n        label: '北京',\\n        value: '01',\\n        children: [\\n          {\\n            label: '东城区',\\n            value: '01-1',\\n          },\\n          {\\n            label: '西城区',\\n            value: '01-2',\\n          },\\n          {\\n            label: '崇文区',\\n            value: '01-3',\\n          },\\n          {\\n            label: '宣武区',\\n            value: '01-4',\\n          },\\n        ],\\n      },\\n      {\\n        label: '浙江',\\n        value: '02',\\n        children: [\\n          {\\n            label: '杭州',\\n            value: '02-1',\\n            children: [\\n              {\\n                label: '西湖区',\\n                value: '02-1-1',\\n              },\\n              {\\n                label: '上城区',\\n                value: '02-1-2',\\n              },\\n              {\\n                label: '江干区',\\n                value: '02-1-3',\\n              },\\n              {\\n                label: '下城区',\\n                value: '02-1-4',\\n              },\\n            ],\\n          },\\n          {\\n            label: '宁波',\\n            value: '02-2',\\n            children: [\\n              {\\n                label: 'xx区',\\n                value: '02-2-1',\\n              },\\n              {\\n                label: 'yy区',\\n                value: '02-2-2',\\n              },\\n            ],\\n          },\\n          {\\n            label: '温州',\\n            value: '02-3',\\n          },\\n          {\\n            label: '嘉兴',\\n            value: '02-4',\\n          },\\n          {\\n            label: '湖州',\\n            value: '02-5',\\n          },\\n          {\\n            label: '绍兴',\\n            value: '02-6',\\n          },\\n        ],\\n      },\\n    ]\\n    return (\\n      <React.Fragment>\\n         <Button\\n          onPress={() => {\\n            this.setState({visible: true});\\n          }}>\\n          显示选择器\\n        </Button>\\n        <SelectCascader\\n          data={data}\\n          onChange={this.onChange}\\n          visible={this.state.visible}\\n          onDismiss={() => {\\n            this.setState({visible: false});\\n          }}\\n        />\\n      <React.Fragment>\\n    );\\n  }\\n}\\n```\\n\\n### Props\\n\\n```ts\\nimport { StyleProp, TextStyle, ViewStyle } from 'react-native';\\n\\nexport type SelectCascaderOneValue = string | number | undefined;\\nexport type SelectCascaderValue = SelectCascaderOneValue[];\\n\\nexport interface SelectCascaderProps {\\n  /** 隐藏 */\\n  onDismiss?: () => void;\\n  /** 弹框标题 */\\n  title?: string;\\n  /** 取消button文字 */\\n  dismissText?: string;\\n  /** 确定button文字 */\\n  okText?: string;\\n  /** 自定义取消元素 */\\n  renderDismissNode: React.ReactNode;\\n  /** 自定义标题元素 */\\n  renderTitleNode: React.ReactNode;\\n  /** 自定义确定元素 */\\n  renderOkNode: React.ReactNode;\\n  /** 选中的值 */\\n  value?: SelectCascaderValue;\\n  /** 选中时执行此回调 */\\n  onChange?: (value: SelectCascaderValue, label: string) => void;\\n  /** 显示隐藏控制值 */\\n  visible: boolean;\\n  /** 列表数据 */\\n  data: ICascaderDataItem[];\\n  /** 默认选择的值 */\\n  defaultValue?: SelectCascaderValue | undefined;\\n  /** 确定选中的值 */\\n  onOk?: (value: SelectCascaderValue, label: string) => void;\\n  /** 列数 默认 3 */\\n  cols?: number;\\n  /** 选择器样式 */\\n  pickerItemStyle?: StyleProp<TextStyle>;\\n  /** 选择器头部样式 */\\n  headerStyle?: StyleProp<ViewStyle>;\\n  /** 点击蒙层是否关闭 */\\n  maskClosable?: boolean;\\n  /** 动作在被触摸操作激活时以多少不透明度显示 默认 1 */\\n  activeOpacity?: number;\\n  /** 动作有触摸操作时显示出来的底层的颜色 默认 #f1f1f1 */\\n  underlayColor?: string;\\n}\\n```   \\n\";"],"sourceRoot":""}