{"version":3,"file":"static/js/753.e7122f53.chunk.js","mappings":"wRAQMA,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mNAapBC,GAAWH,EAAAA,EAAAA,IAAOI,EAAAA,EAAPJ,CAAuBK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,0FAMlCI,EAAkB,SAACC,EAAOC,EAAOC,GACrC,OAAIC,QAAQC,IAAIJ,EAAOC,GAED,SADHE,QAAQE,IAAIL,EAAOC,GAG/BC,CACT,EAqEA,IAnEgB,SAAAI,GAA0B,IAAvBC,EAAID,EAAJC,KAASC,GAAMC,EAAAA,EAAAA,GAAAH,EAAAI,GAC1BC,EAAUC,EAAAA,GAAAA,QACVC,EAAOD,EAAAA,GAAAA,KACPE,EAAUF,EAAAA,GAAAA,QACVG,GAAOC,EAAAA,EAAAA,QAAO,MACpB,OACEC,EAAAA,EAAAA,MAACzB,EAAO,CAAC0B,IAAKH,EAAKI,SAAA,EACjBC,EAAAA,EAAAA,KAACxB,GAAQyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHb,GAAM,IACVc,aAAa,EAEbC,OAAQf,EAAOe,OACfC,cAAe,SAACC,EAAMC,EAAOC,GAC3B,GAAkB,YAAdF,EAAKG,MAAsBD,GAA0B,SAAhBA,EAAOC,MAAmB,iBAAiBC,KAAKJ,EAAKK,SAAU,CACtG,IAAMC,EAAQN,EAAKN,UAAYM,EAAKN,SAAS,GACzCY,GAASA,EAAMC,YAA8C,SAAhCD,EAAMC,WAAWC,aAChDF,EAAMZ,SAAW,GAErB,CACF,EACAe,WAAY,CACVC,KAAM,SAAAC,GAAiC,IAADC,EAA7BC,EAAMF,EAANE,OAAQb,EAAIW,EAAJX,KAASc,GAAK9B,EAAAA,EAAAA,GAAA2B,EAAAI,GACRC,EAAkBF,EAA/B,aAAsBG,GAAIjC,EAAAA,EAAAA,GAAK8B,EAAKI,GAC5C,GAAIL,KAAWM,EAAAA,EAAAA,IAAOH,GACpB,OAAOrB,EAAAA,EAAAA,KAAA,QAAAC,EAAAA,EAAAA,GAAA,GAAUkB,IAEnB,IAAMM,EAAoB,QAAhBR,EAAGZ,EAAKqB,gBAAQ,IAAAT,OAAA,EAAbA,EAAeU,MAAMF,KAC5BG,GAASC,EAAAA,EAAAA,IAAUR,IAASS,OAAOL,GACnCM,EAAQ3C,EAAO0B,WAAW,GAADkB,OAAIJ,IACnC,GAAIA,GAA2B,oBAAVG,EAAsB,CACzC,IAAMhB,EAAO3B,EAAO6C,KAAKL,GAAQM,OAAS,GACpCtD,GAAQuD,EAAAA,EAAAA,IAAiBd,GAC/B,OACExB,EAAAA,EAAAA,MAACL,EAAAA,GAAU,CACT4C,iBAAkBzD,EAAgBC,EAAO,oBAAoB,GAC7DyD,SAAU1D,EAAgBC,EAAO,YAAY,GAAMmB,SAAA,EAEnDC,EAAAA,EAAAA,KAACT,EAAO,CAAAQ,UACNC,EAAAA,EAAAA,KAAC+B,EAAK,OAER/B,EAAAA,EAAAA,KAACN,EAAO,CAAC4C,KAAMvB,EAAMwB,OAAQ5D,EAAgBC,EAAO,UAAU,GAAMmB,SACjEnB,EAAM4D,OAAS,kBAElBxC,EAAAA,EAAAA,KAACP,EAAI,CAAAM,UACHC,EAAAA,EAAAA,KAAA,QAAAC,EAAAA,EAAAA,GAAA,GAAUqB,QAIlB,CACA,OAAOtB,EAAAA,EAAAA,KAAA,QAAAC,EAAAA,EAAAA,GAAA,GAAUqB,GACnB,OAGJtB,EAAAA,EAAAA,KAACyC,EAAAA,EAAM,CAACtD,KAAMA,KACda,EAAAA,EAAAA,KAAC0C,EAAAA,GAAO,CAACC,MAAO,IAAI5C,SACjB,SAAA6C,GAAA,IAAGC,EAAOD,EAAPC,QAASC,EAAWF,EAAXE,YAAW,OACtB9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAM,CACLC,MAAO,GACPC,QAAS,kBAAMH,GAAa,EAC5BI,OAAQ,kBAAMlD,EAAAA,EAAAA,KAACmD,EAAAA,GAAI,CAAC3C,KAAK,YAAa,EACtCqC,QAASA,GACD,MAKpB,C,4GCpGA,GACI/B,WAAY,CAAG,EACfmB,KAAM,CAAC,EACP9B,OAAQ,ohN,WCDNiD,EAAoB,SAACC,GAGzB,OAFkBC,EAAAA,MACFC,CAASF,EAE3B,EAUA,EARa,WAAH,OACRrD,EAAAA,EAAAA,KAACT,EAAAA,GAAOU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFuD,GAAE,IACNJ,kBAAmBA,EACnBjE,KAAK,oEACL,C,oBCdJ,SAASsE,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAE5C,KAAO,mBACH4C,CACP,CACAF,EAAoBI,KAAO,WAAa,MAAO,EAAI,EACnDJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR,C,oBCRjB,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAE5C,KAAO,mBACH4C,CACP,CACAF,EAAoBI,KAAO,WAAa,MAAO,EAAI,EACnDJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR,C","sources":["component/Preview/index.js","pages/docs/react-native-template/new-page/README.md","pages/docs/react-native-template/new-page/index.tsx","../node_modules/markdown-react-code-preview-loader/node_modules/@babel/standalone|sync","pages/docs/react-native-template/new-page|sync|//.(png%7Cgif%7Cjpg%7Csvg)$"],"sourcesContent":["import MarkdownPreview from '@uiw/react-markdown-preview';\nimport styled from 'styled-components';\nimport { BackTop, Circle, Icon } from 'uiw';\nimport { getMetaId, isMeta, getURLParameters } from 'markdown-react-code-preview-loader';\nimport CodeLayout from 'react-code-preview-layout';\nimport { useRef } from 'react';\nimport Footer from '../Footer';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  .w-rcpl-preview {\n    white-space: normal;\n  }\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Markdown = styled(MarkdownPreview)`\n  padding: 50px 50px 120px 50px;\n  /* max-width: 1024px; */\n  width: 1024px;\n`;\n\nconst getBooleanValue = (param, field, defaultValue) => {\n  if (Reflect.has(param, field)) {\n    const newValue = Reflect.get(param, field);\n    return newValue === 'true';\n  }\n  return defaultValue;\n};\n\nconst Preview = ({ path, ...mdData }) => {\n  const Preview = CodeLayout.Preview;\n  const Code = CodeLayout.Code;\n  const Toolbar = CodeLayout.Toolbar;\n  const $dom = useRef(null);\n  return (\n    <Wrapper ref={$dom}>\n      <Markdown\n        {...mdData}\n        disableCopy={true}\n        // transformImageUri={transformImageUri}\n        source={mdData.source}\n        rehypeRewrite={(node, index, parent) => {\n          if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {\n            const child = node.children && node.children[0];\n            if (child && child.properties && child.properties.ariaHidden === 'true') {\n              child.children = [];\n            }\n          }\n        }}\n        components={{\n          code: ({ inline, node, ...props }) => {\n            const { 'data-meta': meta, ...rest } = props;\n            if (inline || !isMeta(meta)) {\n              return <code {...props} />;\n            }\n            const line = node.position?.start.line;\n            const metaId = getMetaId(meta) || String(line);\n            const Child = mdData.components[`${metaId}`];\n            if (metaId && typeof Child === 'function') {\n              const code = mdData.data[metaId].value || '';\n              const param = getURLParameters(meta);\n              return (\n                <CodeLayout\n                  disableCheckered={getBooleanValue(param, 'disableCheckered', true)}\n                  bordered={getBooleanValue(param, 'bordered', true)}\n                >\n                  <Preview>\n                    <Child />\n                  </Preview>\n                  <Toolbar text={code} copied={getBooleanValue(param, 'copied', true)}>\n                    {param.title || '示例'}\n                  </Toolbar>\n                  <Code>\n                    <code {...rest} />\n                  </Code>\n                </CodeLayout>\n              );\n            }\n            return <code {...rest} />;\n          },\n        }}\n      />\n      <Footer path={path} />\n      <BackTop speed={500}>\n        {({ percent, scrollToTop }) => (\n          <Circle\n            width={50}\n            onClick={() => scrollToTop()}\n            format={() => <Icon type=\"arrow-up\" />}\n            percent={percent}\n          ></Circle>\n        )}\n      </BackTop>\n    </Wrapper>\n  );\n};\nexport default Preview;\n","\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 新增页面\\n\\n这里的『页面』指配置了路由，能够通过链接直接访问的模块。\\n\\n## 目录结构\\n\\n```\\n\\n├── mocker                            # mocker data\\n├── android                           # native android code\\n├── ios                               # native ios code\\n├── src                               # code directory\\n│   ├── components                    # react components\\n│   ├── models                        # The models brings together state, reducers, async actions & action creators in one place\\n│   ├── pages                         # route pages\\n│   ├── routes                        # route configuration\\n│   ├── services                      # api request\\n│   ├── utils                         # public method\\n│   ├── App.js                        # route entery page\\n│   ├── config.js                     # app configuration\\n│   └── global.js                     # Store some global objects for easy calling\\n├── .eslintrc                         # eslint configuration\\n├── index.js                          # app entry file\\n└── package.json                      # This document is all you need to know about what’s required in your package.json file.\\n```\\n\\n## 手动创建\\n\\n在 src / pages 下创建新的 js 文件。 如果有多个相关页面，您可以创建一个新文件夹来放置相关文件\\n\\n```\\n├── src\\n│   ├── pages\\n│   │   └── NewPage # 📑 添加 新页面目录\\n│   │       └── index.js # 📑 添加 新页面\\n```\\n\\n为了更好的演示，我们初始化NewPage/index.js的内容如下：\\n```js\\nimport React, {Component} from 'react';\\nimport {View, Text, SafeAreaView} from 'react-native';\\n\\nexport default class MyNewPage extends Component {\\n  render() {\\n    return (\\n      <SafeAreaView>\\n        <View>\\n          <Text>我的</Text>\\n        </View>\\n      </SafeAreaView>\\n    );\\n  }\\n}\\n```\\n将文件加入菜单和路由\\n\\n在 src / routes 下homeTab.js中使用 component 配置我们页面到路由中\\n```js\\nimport MyNewPage from '../pages/NewPage';\\n\\nexport const stackPageData = [\\n  {\\n    name: 'MyNewPage',\\n    component: MyNewPage,\\n    options: {\\n      title: '我的',\\n    },\\n  },\\n];\\n```\\n路由配置完成后，访问页面即可看到效果，如需要配置 `title`，`tabBarIcon`，`header`等更多设置可以在这里找到[React Navigation](https://reactnavigation.org/docs/stack-navigator/)\\n\\n## 新增 api\\n\\n在 src / services 文件夹下创建本模块对应的 api 服务\\n\\n## 新增组件\\n\\n个人写项目的习惯，在全局的 @/components 只会写一些全局的组件，如各种搜索组件，封装的日期组件等等能被公用的组件。每个页面或者模块特定的业务组件则会写在当前 pages 下面。\\n\\n## 新增样式\\n\\n页面的样式和组件是一个道理，全局的 @/styles 放置一下全局公用的样式，每一个页面的样式就写在当前 pages 下面\\n```jsx\\nconst styles = StyleSheet.create({\\n  content: {\\n    marginTop: 50,\\n  },\\n  btnStyle: {\\n    borderRadius: 4,\\n    margin: 16,\\n  },\\n})\\n```\\n具体请参照官方文档[样式](https://reactnative.cn/docs/style)\\n\\n## Rematch\\n\\n### 第一步:建立models\\n\\n```bash\\n  mocker\\n  ...\\nsrc\\n  models\\n  +     home.js\\n  pages\\n...\\npackage.json\\n```\\n\\n```js\\nexport default {\\n  name: 'home',\\n  // initial state\\n  state: {\\n    num:0\\n  }, \\n  reducers: {\\n   update: (state, payload) => ({ ...state, ...payload }),\\n  },\\n  effects: (dispatch) => ({\\n    // 可以进行异步请求\\n  }),\\n};\\n```\\n\\n### 第二步:初始化store\\n\\n```js\\nimport { init } from '@rematch/core';\\nimport createLoadingPlugin from '@rematch/loading';\\nimport * as home from './home';\\n\\n\\nconst loadingPlugin = createLoadingPlugin({});\\n\\nexport const store = init({\\n  models: {\\n    home: home.default,\\n  },\\n  plugins: [loadingPlugin],\\n});\\n\\n```\\n\\n### 第三步:页面中使用\\n```js\\nimport React, { useState } from 'react';\\nimport { View,Text } from 'react-native'\\nimport { Button } from '@uiw/react-native';\\nimport { connect } from 'react-redux';\\n\\nconst Demo = ({ num,update }) => {\\n  const click = ()=>{\\n    update({\\n      num:10\\n    })\\n  }\\n  return (\\n     <View>\\n      <Text>{num}</Text>\\n      <Button onPress={click}>点击</Button>\\n    </View>\\n  );\\n}\\n\\nexport default connect(\\n  ({ home }) => ({\\n    num:home.num\\n  }),\\n  ({ home }) => ({\\n    update: home.update\\n  }),\\n)(Demo);\\n\\n```\\n\\n我们也可以使用hooks调用\\n```js\\nimport React, { useState } from 'react';\\nimport { View,Text } from 'react-native'\\nimport { Button } from '@uiw/react-native';\\nimport { useSelector,useDispatch } from 'react-redux';\\n\\nconst Demo = () => {\\n  const dispatch = useDispatch();\\n  const { num } =useSelector(state=>state.home)\\n  const click = ()=>{\\n    dispatch({\\n      type:'home/update',\\n      payload:{\\n        num:10\\n      }\\n    })\\n  }\\n  return (\\n    <View>\\n      <Text>{num}</Text>\\n      <Button onPress={click}>点击</Button>\\n    </View>\\n  );\\n}\\n\\nexport default Demo\\n\\n```\\n具体请参照官方文档[Rematch](https://rematchjs.org/docs/)\"\n  }","import Preview from 'src/component/Preview';\nimport md from './README.md';\n\nconst transformImageUri = (url: string) => {\n  const reqImage = (require as any).context!('./', true, /\\.(png|gif|jpg|svg)$/);\n  const urlAddr = reqImage(url);\n  return urlAddr;\n};\n\nconst DEMO = () => (\n  <Preview\n    {...md}\n    transformImageUri={transformImageUri}\n    path=\"website/src/pages/docs/react-native-template/new-page/README.md\"\n  />\n);\n\nexport default DEMO;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 50882;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 18345;\nmodule.exports = webpackEmptyContext;"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Markdown","MarkdownPreview","_templateObject2","getBooleanValue","param","field","defaultValue","Reflect","has","get","_ref","path","mdData","_objectWithoutProperties","_excluded","Preview","CodeLayout","Code","Toolbar","$dom","useRef","_jsxs","ref","children","_jsx","_objectSpread","disableCopy","source","rehypeRewrite","node","index","parent","type","test","tagName","child","properties","ariaHidden","components","code","_ref2","_node$position","inline","props","_excluded2","meta","rest","_excluded3","isMeta","line","position","start","metaId","getMetaId","String","Child","concat","data","value","getURLParameters","disableCheckered","bordered","text","copied","title","Footer","BackTop","speed","_ref3","percent","scrollToTop","Circle","width","onClick","format","Icon","transformImageUri","url","require","reqImage","md","webpackEmptyContext","req","e","Error","keys","resolve","id","module","exports"],"sourceRoot":""}